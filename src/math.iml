let is_even (x:int) : bool = x mod 2 = 0

let is_odd (x:int) : bool = x mod 2 <> 0

let rec pow2 (x:int) : real =
  if x = 0 then
    1.
  else if x > 0 then
    (2. *. pow2 (x - 1))
  else (* x < 0 *)
    pow2 (x + 1) /. 2. [@@measure (Ordinal.of_int (abs x))]

let rec ipow2 (x:int) : int =
  if x <= 0 then 1
  else 2 * ipow2 (x - 1)

let floor (x : real) : int = Real.to_int x

let rec ilog2 (x : int) : int =
  (* Ugly hack, replace with dedicated number_of_digits function? *)
  let x = abs x  in
  match x with
  | 0 -> 0
  | 1 -> 0
  | _ -> 1 + ilog2 ((x + 1) / 2)  [@@measure Ordinal.of_int (abs x)]