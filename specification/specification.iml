[@@@import Util, "dune:math"]
[@@@import ExReal, "dune:math"]
[@@@import IEEE754, "IEEE754.iml"]

(** Format definitions *)

module Format = struct
  type t =
    | B8P1
    | B8P2
    | B8P3
    | B8P4
    | B8P5
    | B8P6
    | B8P7

  let precision (f : t) =
    match f with
    | B8P1 -> 1
    | B8P2 -> 2
    | B8P3 -> 3
    | B8P4 -> 4
    | B8P5 -> 5
    | B8P6 -> 6
    | B8P7 -> 7
    [@@macro]

  let get_format_parameters (f : t) : int * int * int * real =
    let open Util in
    let k : int = 8 in
    let p : int = precision f in
    let emax : int = ipow2 (k - p - 1) - 1 in
    let max : real = if f = B8P1 then
        pow2 63
      else
        pow2 emax *. (2. -. pow2 (2 - p)) in
    let bias : int = if f = B8P1 then
        emax
      else
        emax + 1 in
    k, p, bias, max
end

(** Saturation mode is just a bool *)

module SaturationMode = struct
  type t = bool
end

(** Rounding mode definitions *)

module RoundingMode = struct
  type t =
    | TowardZero
    | TowardNegative
    | TowardPositive
    | NearestTiesToEven
    | NearestTiesToAway
end

(* Projection specifications *)
module Projection = struct
  type t = SaturationMode.t * RoundingMode.t
end

(** Floating-point numeral definitions *)

module Float8 = struct
  (* Type definition *)
  type t = { b7: bool; b6: bool; b5: bool; b4: bool; b3: bool; b2: bool; b1: bool; b0: bool; } [@@ocamlformat "disable"]

  (* Constants *)

  let nan : t =
    { b7 = true; b6 = false; b5 = false; b4 = false; b3 = false; b2 = false; b1 = false; b0 = false; } [@@ocamlformat "disable"]

  let ninf : t =
    { b7 = true; b6 = true; b5 = true; b4 = true; b3 = true; b2 = true; b1 = true; b0 = true; } [@@ocamlformat "disable"]

  let pinf : t =
    { b7 = false; b6 = true; b5 = true; b4 = true; b3 = true; b2 = true; b1 = true; b0 = true; } [@@ocamlformat "disable"]

  let zero : t =
    { b7 = false; b6 = false; b5 = false; b4 = false; b3 = false; b2 = false; b1 = false; b0 = false; } [@@ocamlformat "disable"]

  (* Encoding into integers *)
    let to_int_repr (x : t) : int =
      (if x.b0 then 1 else 0)
    + (if x.b1 then 2 else 0)
    + (if x.b2 then 4 else 0)
    + (if x.b3 then 8 else 0)
    + (if x.b4 then 16 else 0)
    + (if x.b5 then 32 else 0)
    + (if x.b6 then 64 else 0)
    + (if x.b7 then 128 else 0)
  [@@ocamlformat "disable"]

  let of_int_repr (i : int) : t =
    let open Util in
    {
      b0 = i mod 2 <> 0;
      b1 = (machine_idiv i 2) mod 2 <> 0;
      b2 = (machine_idiv i 4) mod 2 <> 0;
      b3 = (machine_idiv i 8) mod 2 <> 0;
      b4 = (machine_idiv i 16) mod 2 <> 0;
      b5 = (machine_idiv i 32) mod 2 <> 0;
      b6 = (machine_idiv i 64) mod 2 <> 0;
      b7 = (machine_idiv i 128) mod 2 <> 0;
    }

  (** Shift float8 to the right *)
  let rec bit_shift_right (x : t) (i : int) : t =
    if i <= 0 then x
    else (
      let shift1 (x : t) =
        {
          b7 = false;
          b6 = x.b7;
          b5 = x.b6;
          b4 = x.b5;
          b3 = x.b4;
          b2 = x.b3;
          b1 = x.b2;
          b0 = x.b1;
        }
      in
      shift1 (bit_shift_right x (i - 1)))
    [@@unroll 6]

  (** Shift float8 to the left *)
  let rec bit_shift_left (x : t) (i : int) : t =
    if i <= 0 then x
    else (
      let shift1 (x : t) =
        {
          b7 = x.b6;
          b6 = x.b5;
          b5 = x.b4;
          b4 = x.b3;
          b3 = x.b2;
          b2 = x.b1;
          b1 = x.b0;
          b0 = false;
        }
      in
      shift1 (bit_shift_left x (i - 1)))

  let real_is_within_range (f : Format.t) (x : real) : bool =
    let _, _, _, fmax = Format.get_format_parameters f in
    (-. fmax) <=. x && x <=. fmax

  let exreal_is_within_range (f : Format.t) (x : ExReal.t)  : bool =
    match x with
    | ExReal.PINF | ExReal.NINF -> true
    | ExReal.R r -> real_is_within_range f r

  module NaNOrExReal = struct
    type t =
      | NaN
      | XR of ExReal.t

    let ( ~- ) (x:t) =
      let open ExReal.Infix in
      match x with
      | NaN -> NaN
      | XR xr -> XR (~-. xr)

    let is_within_range (f : Format.t) (x : t) =
      match x with
      | NaN -> true
      | XR xr -> exreal_is_within_range f xr
  end


  (** 4.6.1 Decode *)

  let rec decode (f : Format.t) (x : t) : (NaNOrExReal.t, string) Result.t =
    let open Util in
    let k, p, b, _ = Format.get_format_parameters f in
    match to_int_repr x with
    | x when x = ipow2 (k - 1) -> Ok (NaNOrExReal.NaN)
    | x when x = ipow2 (k - 1) - 1 -> Ok (NaNOrExReal.XR ExReal.PINF)
    | x when ipow2 (k - 1) < x && x < ipow2 k ->

      (match decode f (of_int_repr (x - ipow2 (k - 1))) with
      | Ok (r:NaNOrExReal.t) ->
        let open ExReal.Infix in
        Ok (match r with
            | NaNOrExReal.NaN -> NaN
            | NaNOrExReal.XR xr -> XR (~-. xr))
      | Error e -> Error e)

    | x when 0 <= x && x < (ipow2 (k - 1)) - 1 ->
      let t = x mod (ipow2 (p - 1)) in
      let e = (Util.machine_idiv x (ipow2 (p - 1))) - b in

      let open ExReal.ResultInfix in
      let r = (
        if e = - b then
          (ix 0 +. ix t *. (pow2 (1 - p))) *. (pow2 (e + 1))
        else
          (ix 1 +. ix t *. (pow2 (1 - p))) *. (pow2 e)) in
      (match r with
      | Ok xr -> Ok (XR xr)
      | Error e -> Error e)

    | _ -> Error "unreachable"


  (* 4.6.3 RoundToPrecision *)

  let internal_round_to_precision (p : int) (b : int) (rnd : RoundingMode.t) (x : ExReal.t)
    : (ExReal.t, string) Result.t =
    let open Util in
    let open RoundingMode in
    let rsign (x:real) = if x <. 0.0 then -1.0 else 1.0 [@@macro] in
    let ifb1 (b:bool) : int = if b then 1 else 0 [@@macro] in
    let is_even (x : int) : bool = x mod 2 = 0 [@@macro] in
    match x with
    | ExReal.NINF
    | ExReal.PINF -> Ok x
    | ExReal.R 0.0 -> Ok x
    | ExReal.R x ->
      let e : int = max (ilog2 (Real.to_int x)) (1 - b) - p + 1 in
      let s : real = Real.abs x *. pow2 (- e) in
      let delta : real = Real.(s - floor s) in
      let code_is_even : bool =
        if p > 1 then
          is_even (Real.to_int s)
        else
          floor s = 0.0 || is_even (e + b) in
      let round_away (delta : real) (code_is_even : bool) (rnd : RoundingMode.t) (x : real): bool =
        (match rnd with
        | NearestTiesToEven -> delta >. 0.5 || (delta = 0.5 && not code_is_even)
        | NearestTiesToAway -> delta >=. 0.5
        | TowardPositive -> delta >. 0.0 && x >. 0.0
        | TowardNegative -> delta >. 0.0 && x <. 0.0
        | TowardZero -> false)
      in
      let i = ifloor s + ifb1 (round_away delta code_is_even rnd x) in
      let open ExReal.ResultInfix in
      let z = rx (rsign x) *. (ix i) *. (2 ^. e) in
      z

  (** Convert extended real value [x] to a new extended real that is representable
      with a given precision [p]. The exponent is bounded below by [2 - p - b] and
      unbounded above. *)
  let round_to_precision (p : int) (b : int) (rnd : RoundingMode.t) (x : ExReal.t)
    : ExReal.t =
    match internal_round_to_precision p b rnd x with
    | Ok r -> r
    | Error _ -> R 0.0 (* unreachable by internal_round_to_precision_ok *)


  (** 4.6.4 Saturate *)

  let internal_saturate (m : real) (sat : bool) (rnd : RoundingMode.t) (x : ExReal.t) : (ExReal.t, string) Result.t =
    let open ExReal in
    let open ExReal.Infix in
    let open RoundingMode in
    let m = ExReal.of_real m in
    match (sat, rnd), x with
    | (_, _), x when (~-. m) <=. x && x <=. m -> Ok (x)
    | (true, _), x when x <. (~-. m) || x >. m -> ExReal.sign x *. m
    | (false, _), x when x = PINF || x = NINF -> Ok (x)
    | (false, TowardZero), x when abs x >=. m || x = PINF -> sign x *. m
    | (false, TowardPositive), x when x <=. ~-. m && x <> NINF -> Ok (~-. m)
    | (false, TowardNegative), x when x >. m && x <> PINF -> Ok (m)
    | (false, _), x -> ExReal.sign x *. PINF
    | _ -> Error "unreachable"

  (** Saturate extended real [x] to +-INF, or to maximum value [m], according to projection specification [pi]. *)
  let saturate (m : real) (sat : bool) (rnd : RoundingMode.t) (x : ExReal.t) : ExReal.t =
    match internal_saturate m sat rnd x with
    | Ok x -> x
    | Error _ -> R 0.0 (* unreachable by theorem internal_saturate_ok *)


  (** 4.6.5 Encode *)

  let rec encode (f : Format.t) (x : NaNOrExReal.t) : (t, string) Result.t =
    let open Util in
    let k, p, b, _ = Format.get_format_parameters f in
    if not (NaNOrExReal.is_within_range f x)  then
        Error "precondition violation"
    else
      match x with
      | NaNOrExReal.NaN -> Ok (of_int_repr (ipow2 (k - 1)))
      | NaNOrExReal.XR PINF -> Ok (of_int_repr (ipow2 (k - 1) - 1))
      | NaNOrExReal.XR x when ExReal.Infix.(x <. rx 0.0) ->

        let open ExReal.ResultInfix in
        (match (~-. (Ok x)) with
          | Ok neg_x ->
            (match encode f (NaNOrExReal.XR neg_x) with
            | Ok (v : t) -> Ok (of_int_repr ((to_int_repr v) + (ipow2 (k - 1))))
            | Error e -> Error e)
          | Error e -> Error e)

      | NaNOrExReal.XR x when ExReal.Infix.(x = rx 0.0) -> Ok zero

      | NaNOrExReal.XR (R x) ->
        let open ExReal in
        let open ResultInfix in
        let e : int = Int.max (floor_log2_abs x 64) (1 - b) in
        let s = (rx x) *. (2 ^. (- e)) *. (2 ^. (p - 1)) in
        (match s with
          | Ok (R s) ->
            (* [s] is an integer *)
            let s = Real.to_int s in
            let t = s mod (ipow2 (p - 1)) in
            let z =
              if s < ipow2 (p - 1) then
                t
              else
                t + (e + b) * ipow2 (p - 1) in
            Ok (of_int_repr z)
          | Ok _ -> Error "unreachable"
          | Error e -> Error e)

      | _ -> Error "unreachable"


  (* 4.6.2 Project *)

  (** Project extended real value [x] to P3109 format [f]. *)
  let project (f : Format.t) (pi : Projection.t) (x : ExReal.t) : (t, string) Result.t =
    let _, p, b, m = Format.get_format_parameters f in
    let sat, rnd = pi in
    let r : ExReal.t = round_to_precision p b rnd x in
    let s : ExReal.t = saturate m sat rnd r in
    encode f (NaNOrExReal.XR s)


  (** 4.7.1 Specification of IEEE Std 754 formats *)
  (* See also IEEE754.ml *)

  let encode754 (phi : IEEE754.Format.t) (x : ExReal.t) : IEEE754.t =
    IEEE754.round x phi IEEE754.RoundingMode.TowardZero


  (** 4.7.2 Conversion from IEEE Std 754 formats to P3109 *)

  let internal_convert_to_p3109 (phi: IEEE754.Format.t) (f : Format.t) (pi : Projection.t) (x : IEEE754.t) : (t, string) Result.t =
    if IEEE754.is_nan x phi then Ok nan
    else
      match IEEE754.to_exreal x phi with
      | Ok xr -> project f pi xr
      | Error e -> Error e

  let convert_to_p3109 (phi: IEEE754.Format.t) (f : Format.t) (pi : Projection.t) (x : IEEE754.t) : t =
    match internal_convert_to_p3109 phi f pi x with
    | Ok r -> r
    | _ -> nan (* unreachable by theorem internal_convert_to_p3109_ok *)


  (** 4.7.3 Conversion from P3109 to IEEE Std 754 *)

  (* Convert [x] (in [f_x]) to IEEE−754 binary interchange format Binary{[k]} under IEEE−754 rounding mode [rnd754] *)
  let convert_to_ieee_754 (f : Format.t) (pi : Projection.t) (phi : IEEE754.Format.t) (x : t) : IEEE754.t =
    if x = nan then (* canonical if defined else quiet *)
      IEEE754.canonical_nan phi
    else (
      match decode f x with
      | Ok (NaNOrExReal.NaN) -> IEEE754.quiet_nan phi
      | Ok (NaNOrExReal.XR y) ->
        let _, _, _, _, _, p, b, m = IEEE754.Format.get_format_parameters phi in
        let r = round_to_precision p b (snd pi) y in
        let x = saturate m (fst pi) (snd pi) r in
        encode754 phi x
      | Error _ -> IEEE754.quiet_nan phi)


  (** 4.7.4 Conversion from P3109 to P3109 *)

  (** Convert [x] (in [f_x]) to [f_z] with projection specification [pi] *)
  let convert_p3109_to_p3109 (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    match x with
    | x when x = nan -> encode f_z NaNOrExReal.NaN
    | x ->
      match decode f_x x with
      | Ok (NaNOrExReal.XR x) -> project f_z pi x
      | _ -> Error "unreachable"

  (** 4.8.1 Unary sign operations *)

  let internal_abs (f : Format.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match decode f x with
    | Ok (NaNOrExReal.NaN) -> Ok nan
    | Ok (XR x) -> encode f (XR (ExReal.abs x))
    | Error e -> Error e

  (** Return the absolute value of [x] in [f] *)
  let abs (f : Format.t) (x : t)  : t =
    match internal_abs f x  with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_abs_ok *)

  let internal_negate (f : Format.t) (x : t) : (t, string) Result.t =
    match x with
    | x when x = nan -> Ok nan
    | x ->
      let x = decode f x in
      match x with
      | Ok x -> encode f NaNOrExReal.(~- x)
      | Error e -> Error e

  (** Return the negation of [x] in [f] *)
  let negate (f : Format.t) (x : t) : t =
    match internal_negate f x with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_negate_ok *)


  (** 4.8.2 Binary sign operations *)

  let internal_copy_sign (f : Format.t) (x : t) (y : t) : (t, string) Result.t =
    let open ExReal.Infix in
    match x, y with
    | x, y when x = nan || y = nan -> Ok nan
    | _ ->
      match decode f y with
      | Ok (NaNOrExReal.NaN) -> Ok nan
      | Ok (NaNOrExReal.XR yr) when yr >=. ExReal.zero -> (internal_abs f x)
      | Ok (NaNOrExReal.XR _) -> (internal_negate f (abs f x))
      | Error e -> Error e

  let copy_sign (f : Format.t) (x : t) (y : t) : t =
    match internal_copy_sign f x y with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_copy_sign_ok *)


  (** 4.8.3 Binary arithmetic operations *)

  let internal_add (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
      (x : t) (y : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match (x, y) with
    | _, y when y = nan -> Ok nan
    | x, _ when x = nan -> Ok nan
    | x, y when x = ninf && y = pinf -> Ok nan
    | x, y when x = pinf && y = ninf -> Ok nan
    | x, y ->
      let x = decode f_x x in
      let y = decode f_y y in
      (match x, y with
      | Ok NaNOrExReal.NaN, _
      |  _, Ok NaNOrExReal.NaN
      | Ok NaNOrExReal.XR PINF, Ok NaNOrExReal.XR NINF
      | Ok NaNOrExReal.XR NINF, Ok NaNOrExReal.XR PINF ->
        Error "unreachable"
      | Ok (XR x), Ok (XR y)  ->
        let open ExReal.Infix in
        (match (x +. y) with
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | _, Error e
      | Error e, _ -> Error e)

  (** Add [x] (in [f_x]) to [y] (in [f_y]), and return in [f_z] under projection specification [pi] *)
  let add (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
          (x : t) (y : t)  : t =
    match internal_add f_x f_y f_z pi x y with
    | Ok z -> z
    | Error _ -> nan (* unreachable by theorem internal_add_ok *)

  let internal_subtract (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
      (x : t) (y : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match (x, y) with
    | _, y when y = nan -> Ok nan
    | x, _ when x = nan -> Ok nan
    | x, y when x = ninf && y = pinf -> Ok nan
    | x, y when x = pinf && y = ninf -> Ok nan
    | x, y ->
      let x = decode f_x x in
      let y = decode f_y y in
      (match x, y with
      | Ok NaNOrExReal.NaN, _
      |  _, Ok NaNOrExReal.NaN ->
        Error "unreachable"
      | Ok (XR x) , Ok (XR y)  ->
        let open ExReal.Infix in
        (match (x -. y) with
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | _, Error e -> Error e
      | Error e, _ -> Error e)

  (** For [x] (in [f_x]), [y] (in [f_y]) compute [x-y] and return in [f_z],
      with projection specification [pi] *)
  let subtract (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)
      (f_z : Format.t) (pi : Projection.t) :
      t =
    match internal_subtract f_x f_y f_z pi x y with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_subtract_ok *)

  let internal_multiply (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
    (x : t) (y : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x, y with
    | _, y when y = nan -> Ok nan
    | x, _ when x = nan -> Ok nan
    | x, y when (x = pinf || x = ninf) && y = zero -> Ok nan
    | x, y when x = zero && (y = pinf || y = ninf) -> Ok nan
    | x, y ->
      let x = decode f_x x in
      let y = decode f_y y in
      (match x, y with
      | Ok NaNOrExReal.NaN, _
      |  _, Ok NaNOrExReal.NaN ->
        Error "unreachable"
      | Ok (XR x) , Ok (XR y)  ->
        let open ExReal.Infix in
        (match (x *. y) with
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | _ -> Error "unreachable")

  (** For [x] (in [f_x]), [y] (in [f_y]) compute x * y and return in [f_z],
      with rounding mode [rnd] and saturation mode [ovf] *)
  let multiply (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)
      (f_z : Format.t) (pi : Projection.t) :
      t =
    match internal_multiply f_x f_y f_z pi x y with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_multiply_ok *)


  let internal_divide (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
    (x : t) (y : t) : (t, string) Result.t =
      let open NaNOrExReal in
      match x, y with
      | _, y when y = nan -> Ok nan
      | x, _ when x = nan -> Ok nan
      | x, y when (x = pinf || x = ninf) && y = zero -> Ok nan
      | x, y when x = zero && (y = pinf || y = ninf) -> Ok nan
      | x, y ->
        let x = decode f_x x in
        let y = decode f_y y in
        (match x, y with
        | Ok NaNOrExReal.NaN, _
        |  _, Ok NaNOrExReal.NaN ->
          Error "unreachable"
        | Ok (XR x) , Ok (XR y)  ->
          let open ExReal.Infix in
          (match (x /. y) with
          | Ok z -> project f_z pi z
          | Error e -> Error e)
        | _ -> Error "unreachable")

  (** For [x] (in [f_x]), [y] (in [f_y]) compute x / y and return in [f_z],
      with rounding mode [rnd] and saturation mode [ovf] *)
  let divide (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) (y : t) : t =
  match internal_divide f_x f_y  f_z pi x y with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_divide_ok *)


  (** 4.8.4 Unary mathematical operations *)

  let internal_sqrt (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x with
    | x when x = nan -> Ok nan
    | _ ->
      let x = decode f_x x in
      (match x with
      | Ok NaNOrExReal.NaN -> Error "unreachable"
      | Ok (XR NINF)
      | Ok (XR PINF) -> Ok nan
      | Ok (XR (R x)) when x <. 0.0 -> Ok nan
      | Ok (XR x) ->
        (match ExReal.sqrt x 8 with (* TODO: Proof that 8 is enough *)
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | Error e -> Error e)

  let sqrt (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : t =
  match internal_sqrt f_x f_z pi x with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_sqrt_ok *)

  let internal_exp (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x with
    | x when x = nan -> Ok nan
    | _ ->
      let x = decode f_x x in
      (match x with
      | Ok NaNOrExReal.NaN -> Error "unreachable"
      | Ok (XR NINF)
      | Ok (XR PINF) -> Ok nan
      | Ok (XR x) ->
        (match ExReal.exp x 9 with (* TODO: Proof that 9 is enough *)
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | Error e -> Error e)

  let exp (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : t =
  match internal_exp f_x f_z pi x with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_exp_ok *)

  let internal_exp2 (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x with
    | x when x = nan -> Ok nan
    | x when x = ninf || x = pinf -> Ok nan
    | _ ->
      let x = decode f_x x in
      (match x with
      | Ok NaNOrExReal.NaN -> Error "unreachable"
      | Ok (XR NINF)
      | Ok (XR PINF) -> Ok nan
      | Ok (XR (R r)) when r <=. 0.0 -> Ok nan
      | Ok (XR x) ->
        (match ExReal.exp2 x 9 with (* TODO: Proof that 9 is enough *)
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | Error e -> Error e)

  let exp2 (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : t =
  match internal_exp2 f_x f_z pi x with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_exp2_ok *)

  let internal_log (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x with
    | x when x = nan -> Ok nan
    | x when x = ninf || x = pinf -> Ok nan
    | _ ->
      let x = decode f_x x in
      (match x with
      | Ok NaNOrExReal.NaN -> Error "unreachable"
      | Ok (XR NINF)
      | Ok (XR PINF) -> Ok nan
      | Ok (XR (R x)) when x <=. 0.0 -> Ok nan
      | Ok (XR x) ->
        (match ExReal.ln x 9 with (* TODO: Proof that 9 is enough *)
        | Ok z -> project f_z pi z
        | Error e -> Ok nan)
      | Error e -> Error e)

  let log (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : t =
  match internal_log f_x f_z pi x with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_log_ok *)

  let internal_log2 (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match x with
    | x when x = nan -> Ok nan
    | _ ->
      let x = decode f_x x in
      (match x with
      | Ok NaNOrExReal.NaN -> Error "unreachable"
      | Ok (XR NINF)
      | Ok (XR PINF) -> Ok nan
      | Ok (XR (R x)) when x <=. 0.0 -> Ok nan
      | Ok (XR x) ->
        (match ExReal.log2 x 9 with (* TODO: Proof that 9 is enough *)
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | Error e -> Error e)

  let log2 (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : t) : t =
  match internal_log2 f_x f_z pi x with
  | Ok x -> x
  | Error _ -> nan (* unreachable by theorem internal_log2_ok *)

  (** 4.8.5 Scaled addition *)

  let internal_add_scaled (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
      (x : t) (s_x : int) (y : t) (s_y : int)
      : (t, string) Result.t =
      let open NaNOrExReal in
      match x, y with
      | _, y when y = nan -> Ok nan
      | x, _ when x = nan -> Ok nan
      | x, y when x = ninf && y = pinf -> Ok nan
      | x, y when x = pinf && y = ninf -> Ok nan
      | x, y ->
        let x = decode f_x x in
        let y = decode f_y y in
        (match x, y with
        | Ok NaNOrExReal.NaN, _
        |  _, Ok NaNOrExReal.NaN ->
          Error "unreachable"
        | Ok (XR x) , Ok (XR y)  ->
          let open ExReal.ResultInfix in
          (match (xx x *. (2 ^. s_x)) +. (xx y *. (2 ^. s_y)) with
          | Ok z -> project f_z pi z
          | Error e -> Error e)
        | _, Error e -> Error e
        | Error e, _ -> Error e)

  (** For [x] (in [f_x]), [y] (in [f_y]), [xscale], [yscale],
      compute [x] * 2^[xscale] + [y] * 2^[yscale] and return in [f_z],
      with projection [pi] *)
  let add_scaled (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
      (x : t) (s_x : int) (y : t) (s_y : int)  : t =
    match
      internal_add_scaled f_x f_y f_z pi x s_x y s_y
    with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_add_scaled_ok *)


  (** 4.8.6 Scaled multiplication *)

  let internal_multiply_scaled (f_x : Format.t) (f_y : Format.t) (f_z : Format.t)  (pi : Projection.t)
      (x : t) (y : t) (s : int) : (t, string) Result.t =
    let open NaNOrExReal in
    match x, y with
    | _, y  when y = nan -> Ok nan
    | x, _ when x = nan -> Ok nan
    | x, y when (x = pinf || x = ninf) && y = zero -> Ok nan
    | x, y when x = zero && (y = pinf || y = ninf) -> Ok nan
    | x, y ->
      let x = decode f_x x in
      let y = decode f_y y in
      (match x, y with
      | Ok NaNOrExReal.NaN, _
      |  _, Ok NaNOrExReal.NaN ->
        Error "unreachable"
      | Ok (XR x) , Ok (XR y)  ->
        let open ExReal.ResultInfix in
        (match (xx x *. xx y *. (2 ^. s)) with
        | Ok z -> project f_z pi z
        | Error e -> Error e)
      | _ -> Error "unreachable")

  (** For [x] (in [f_x]), [y] (in [f_y]), [scale], compute
      [x] * [y] * 2^[scale] and return in [f_z],
      with rounding mode [rnd] and saturation mode [ovf] *)
  let multiply_scaled (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
      (x : t) (y : t) (s : int)  : t =
    match internal_multiply_scaled f_x f_y f_z pi x y s with
    | Ok x -> x
    | Error _ -> nan (* unreachable by theorem internal_multiply_scaled_ok *)


  (** 4.9 Mixed IEEE Std 754 and P3109 operations *)

  let internal_scaled_fma (phi : IEEE754.Format.t) (f_x : Format.t) (f_y : Format.t) (pi : Projection.t)
    (a : IEEE754.t) (s_a : int) (x : t) (y : t) (s : int) : (IEEE754.t, string) Result.t =
  let _, p, _, b, _, _, _, m = IEEE754.Format.get_format_parameters phi in
  match a, s_a, x, y, s with
  | _, _, _, _, _ when IEEE754.is_nan a phi -> Ok (IEEE754.quiet_nan phi)
  | _, _, _, _, _ when x = nan -> Ok (IEEE754.quiet_nan phi)
  | _, _, _, _, _ when y = nan -> Ok (IEEE754.quiet_nan phi)
  | _ ->
    (match IEEE754.to_exreal a phi with
     | Ok a_ ->
        (match decode f_x x, decode f_y y with
        | Ok (NaNOrExReal.XR x_), Ok (NaNOrExReal.XR y_) -> (
          let open ExReal.ResultInfix in
          let z_ = (Ok a_) *. (2 ^. s_a) +. (Ok x_) *. (Ok y_) *. (2 ^. s) in
          (match z_ with
          | Ok z_ ->
            let z_' = round_to_precision p b (snd pi) z_ in
            let z_'' = saturate m (fst pi) (snd pi) z_' in
            let z = encode754 phi z_'' in
            Ok z
          | Error e -> Error e))
        | Error e, _ -> Error e
        | _, Error e -> Error e
        | _ -> Error "unreachable")
     | Error e -> Error e)

  let scaled_fma (phi : IEEE754.Format.t) (f_x : Format.t) (f_y : Format.t) (pi : Projection.t)
    (a : IEEE754.t) (s_a : int) (x : t) (y : t) (s : int) : IEEE754.t =
    match internal_scaled_fma phi f_x f_y pi a s_a x y s with
    | Ok r -> r
    | _ -> IEEE754.quiet_nan phi (* unreachable by theorem internal_scaled_fma_ok *)


  (** 4.10.1 Minimum and Maximum *)

  let internal_minimum (f : Format.t) (x : t) (y : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match decode f x, decode f y with
    | Ok NaNOrExReal.NaN, Ok _
    | Ok _, Ok NaNOrExReal.NaN -> Ok nan
    | Ok (XR xr), Ok (XR yr) ->
      if ExReal.lt xr yr then Ok x else Ok y
    | Error e, _ | _, Error e -> Error e

  let minimum (f : Format.t) (x : t) (y : t)  : t =
    match internal_minimum f x y  with
    | Ok r -> r
    | Error _ -> nan (* unreachable by theorem internal_minimum_ok *)

  let internal_maximum (f : Format.t) (x : t) (y : t) : (t, string) Result.t =
    let open NaNOrExReal in
    match decode f x, decode f y with
    | Ok NaNOrExReal.NaN, Ok _
    | Ok _, Ok NaNOrExReal.NaN -> Ok nan
    | Ok (XR xr), Ok (XR yr) ->
      if ExReal.lt xr yr then Ok y else Ok x
    | Error e, _ | _, Error e -> Error e

  let maximum (f : Format.t) (x : t) (y : t)  : t =
    match internal_maximum f x y  with
    | Ok r -> r
    | Error _ -> nan (* unreachable by theorem internal_maximum_ok *)


  (** 4.10.2 Comparisons *)

  let internal_compare_less (f_x : Format.t) (f_y : Format.t)  (x : t) (y : t) : (bool, string) Result.t =
    let open NaNOrExReal in
    match decode f_x x, decode f_y y with
    | Ok (XR xr), Ok (XR yr) -> Ok ExReal.Infix.(xr <. yr)
    | Ok _, Ok NaNOrExReal.NaN
    | Ok NaNOrExReal.NaN, Ok _ -> Ok false
    | Error e, _ | _, Error e -> Error e

  let compare_less (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)  : bool =
    match internal_compare_less f_x f_y x y  with
    | Ok r -> r
    | Error _ -> false (* unreachable by theorem internal_compare_less_ok *)

  let internal_compare_less_equal (f_x : Format.t) (f_y : Format.t)  (x : t) (y : t) : (bool, string) Result.t =
    let open NaNOrExReal in
    match decode f_x x, decode f_y y with
    | Ok (XR xr), Ok (XR yr) -> Ok ExReal.Infix.(xr <=. yr)
    | Ok _, Ok NaNOrExReal.NaN
    | Ok NaNOrExReal.NaN, Ok _ -> Ok false
    | Error e, _ | _, Error e -> Error e

  let compare_less_equal (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)  : bool =
    match internal_compare_less_equal f_x f_y x y  with
    | Ok r -> r
    | Error _ -> false (* unreachable by theorem internal_compare_less_equal_ok *)

  let internal_compare_equal (f_x : Format.t) (f_y : Format.t)  (x : t) (y : t) : (bool, string) Result.t =
    let open NaNOrExReal in
    match decode f_x x, decode f_y y with
    | Ok (XR xr), Ok (XR yr) -> Ok (xr = yr)
    | Ok _, Ok NaNOrExReal.NaN
    | Ok NaNOrExReal.NaN, Ok _ -> Ok false
    | Error e, _ | _, Error e -> Error e

  let compare_equal (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)  : bool =
    match internal_compare_equal f_x f_y x y  with
    | Ok r -> r
    | Error _ -> false (* unreachable by theorem internal_compare_equal_ok *)

  let internal_compare_greater (f_x : Format.t) (f_y : Format.t)  (x : t) (y : t) : (bool, string) Result.t =
    let open NaNOrExReal in
    match decode f_x x, decode f_y y with
    | Ok (XR xr), Ok (XR yr) -> Ok ExReal.Infix.(xr >. yr)
    | Ok _, Ok NaNOrExReal.NaN
    | Ok NaNOrExReal.NaN, Ok _ -> Ok false
    | Error e, _ | _, Error e -> Error e

  let compare_greater (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)  : bool =
    match internal_compare_greater f_x f_y x y  with
    | Ok r -> r
    | Error _ -> false (* unreachable by theorem internal_compare_greater_ok *)

  let internal_compare_greater_equal (f_x : Format.t) (f_y : Format.t)  (x : t) (y : t) : (bool, string) Result.t =
    let open NaNOrExReal in
    match decode f_x x, decode f_y y with
    | Ok (XR xr), Ok (XR yr) -> Ok ExReal.Infix.(xr >=. yr)
    | Ok _, Ok NaNOrExReal.NaN
    | Ok NaNOrExReal.NaN, Ok _ -> Ok false
    | Error e, _ | _, Error e -> Error e

  let compare_greater_equal (f_x : Format.t) (f_y : Format.t) (x : t) (y : t)  : bool =
    match internal_compare_greater_equal f_x f_y x y  with
    | Ok r -> r
    | Error _ -> false (* unreachable by theorem internal_compare_greater_equal_ok *)


  (** 4.10.3 Predicates and classification *)

  let is_zero (f : Format.t) (x : t) : bool =
    match x with
    | _ when x = nan -> false
    | _ ->
      (match decode f x with
      | Ok NaNOrExReal.NaN -> false
      | Ok (NaNOrExReal.XR xr) -> xr = ExReal.zero
      | _ -> false (* unreachable by theorem decode_ok *))

  let is_one (f : Format.t) (x : t) : bool =
    match x with
    | x when x = nan -> false
    | _ ->
      (match decode f x with
      | Ok NaNOrExReal.NaN -> false
      | Ok (NaNOrExReal.XR xr) -> xr = ExReal.one
      | _ -> false)

  let is_nan (_f : Format.t) (x : t) : bool = x = nan [@@macro]

  let is_sign_minus (f : Format.t) (x : t) : bool =
    match x with
    | _ when x = nan -> true
    | _ ->
      (match decode f x with
      | Ok NaNOrExReal.NaN -> false
      | Ok (NaNOrExReal.XR r) -> ExReal.Infix.(r <. ExReal.zero)
      | _ -> false)

  let is_normal (f : Format.t) (x : t) : bool =
    let k, p, _, _ = Format.get_format_parameters f in
    match x with
    | _ when x = zero || x = ninf || x = pinf || x = nan -> false
    | _ -> Util.machine_idiv ((to_int_repr x) mod (Util.ipow2 (k - 1))) (Util.ipow2 (p - 1)) > 0

  let is_subnormal (f : Format.t) (x : t) : bool =
    let k, p, _, _ = Format.get_format_parameters f in
    match x with
    | _ when x = zero || x = ninf || x = pinf || x = nan -> false
    | _ -> Util.machine_idiv ((to_int_repr x) mod (Util.ipow2 (k - 1))) (Util.ipow2 (p - 1)) = 0

  let is_finite (_f : Format.t) (x : t) : bool = x <> ninf && x <> pinf && x <> nan

  let is_infinite (_f : Format.t) (x : t) : bool = x = ninf || x = pinf

  let is_signaling (_f : Format.t) (_x : t) : bool = false

  let is_canonical (_f : Format.t) (_x : t) : bool = true

  (** Classifier *)

  type class_ =
    | NaN
    | NegativeInfinity
    | NegativeNormal
    | NegativeSubnormal
    | Zero
    | PositiveSubnormal
    | PositiveNormal
    | PositiveInfinity

  let class_internal (f : Format.t) (x : t) : (class_, string) Result.t =
    if is_nan f x then Ok NaN
    else if is_infinite f x && is_sign_minus f x then Ok NegativeInfinity
    else if is_normal f x && is_sign_minus f x then Ok NegativeNormal
    else if is_subnormal f x && is_sign_minus f x then Ok NegativeSubnormal
    else if is_zero f x then Ok Zero
    else if is_subnormal f x && not (is_sign_minus f x) then Ok PositiveSubnormal
    else if is_normal f x && not (is_sign_minus f x) then Ok PositiveNormal
    else if is_infinite f x && not (is_sign_minus f x) then Ok PositiveInfinity
    else Error "unclassified"

  let class_ (f : Format.t) (x : t) : class_ =
    match class_internal f x with
    | Ok c -> c
    | Error _ -> NaN (* Unchreable by thm_class_internal_ok *)


  (** 4.10.5 Total order predicate *)

  let total_order (f_x : Format.t) (f_y : Format.t) (x : t) (y: t) : bool =
    match x, y with
    | x, _ when x = nan -> true
    | _, y when y = nan -> false
    | _ -> compare_less_equal f_x f_y x y


  (** 4.10.6 Comparison predicates *)

  let equal f_x f_y x y = compare_equal f_x f_y x y

  let greater f_x f_y x y = compare_greater f_x f_y x y

  let greater_equal f_x f_y x y = compare_greater_equal f_x f_y x y

  let less f_x f_y x y = compare_less f_x f_y x y

  let less_equal f_x f_y x y = compare_less_equal f_x f_y x y

  let ordered f_x f_y x y = total_order f_x f_y x y

  let not_equal f_x f_y x y = not (compare_equal f_x f_y x y)

  let not_greater f_x f_y x y = not (compare_greater f_x f_y x y)

  let not_greater_equal f_x f_y x y = not (compare_greater_equal f_x f_y x y)

  let not_less f_x f_y x y = not (compare_less f_x f_y x y)

  let not_less_equal f_x f_y x y = not (compare_less_equal f_x f_y x y)

  let unordered f_x f_y x y = not (total_order f_x f_y x y)


  (** Convert [x] to a string of zeroes and ones (for debug purposes) *)
  let to_string (f : Format.t) (x : t) : string =
    let bool_to_bin x = if x then "1" else "0" in
    match decode f x with
    | Error e -> Printf.sprintf "error: %s" e
    | Ok (NaNOrExReal.NaN) -> "NaN"
    | Ok (NaNOrExReal.XR xreal) ->
      Printf.sprintf "%s%s%s%s%s%s%s%s = %s" (bool_to_bin x.b7) (bool_to_bin x.b6)
        (bool_to_bin x.b5) (bool_to_bin x.b4) (bool_to_bin x.b3)
        (bool_to_bin x.b2) (bool_to_bin x.b1) (bool_to_bin x.b0)
        (if is_nan f x then "NaN" else ExReal.to_string xreal)
        [@@ocamlformat "if-then-else=compact"] [@@program]
end
