[@@@import Util, "dune:math"]
[@@@import Log, "dune:math"]
[@@@import Exp, "dune:math"]
[@@@import Specification, "specification.iml"]
[@@@import Theorems_pow2, "theorems_pow2.iml"]
[@@@import Theorems_format_ranges, "theorems_format_ranges.iml"]
[@@@import Theorems_IEEE754, "theorems_ieee754.iml"]

open Specification

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

(** Formats *)

theorem format_parameter_limits (f : Format.t) =
  let k, p, b, _, _, s, d = (Format.get_format_parameters f [@trigger]) in
  0 < k && k <= 15 &&
  0 < p && p <= 15 &&
  b <= Util.ipow2 (k - p)
  [@@timeout 600]
  [@@by unroll_nonlin 20 10 100]
  [@@fc]

theorem m_hi_gt_0 (f : Format.t) =
  let _, _, _, m_lo, m_hi, _, _ = Format.get_format_parameters f in
  m_hi >. 0.0
  [@@timeout 20]
  [@@by enumerate ["f"] @> ground_eval ()]

theorem m_lo_lt_m_hi (f : Format.t) =
  let _, _, _, m_lo, m_hi, _, _ = Format.get_format_parameters f [@trigger] in
  m_lo <. m_hi
  [@@disable Format.get_format_parameters, Util.ipow2, Util.pow2]
  [@@by [%use m_hi_gt_0 f] @> auto]
  [@@fc]

(** 4.6 Functions *)

theorem internal_saturate_ok (m_lo : real) (m_hi : real) (sat : SaturationMode.t) (rnd : RoundingMode.t) (x : CER.t)  (s : Signedness.t) (d : Domain.t) =
  Result.is_ok (Float.internal_saturate m_lo m_hi sat rnd x s d  [@trigger])
  [@@by auto]
  [@@fc]

theorem internal_round_to_precision_ok (p : int) (b : int) (rnd : RoundingMode.t) (x : CER.t) =
  Result.is_ok (Float.internal_round_to_precision p b rnd x)

(* [decode_aux] never throws an error *)
theorem decode_aux_ok (k : int) (p : int) (b : int) (s: Signedness.t) (d : Domain.t) (x : Float.t) =
  Result.is_ok ((Float.decode_aux k p b s d x) [@trigger])
  [@@timeout 240]
  [@@by auto]
  [@@fc]

(* [decode] always produces numbers within the format range *)
theorem decode_within_range (f : Format.t) (x : Float.t) =
  aug_real_is_within_range f ((Float.decode f x) [@trigger])
  [@@timeout 600]
  [@@disable Float.decode, Float.decode_aux, Format.get_format_parameters]
  [@@by [%use Theorems_format_ranges.within_format_range f x] @> auto]
  [@@fc]

(* [encode] is ok if the input is within the format range *)
theorem encode_ok_within_range (f : Format.t) (x : CER.t) =
  let _, _, _, m_lo, m_hi, s, _ = Format.get_format_parameters f in
  let encoded = Float.encode f x [@@trigger] in
  if aug_real_is_within_range f x then
    Result.is_ok encoded
  else
    Result.is_error encoded
  [@@by unroll_nonlin 10 2 100]
  [@@timeout 60]
  [@@fc]

(* Encoding a decoded number is always ok *)
theorem decode_encode_ok (f : Format.t)  (x : Float.t) =
  Result.is_ok (Float.encode f (Float.decode f x) [@trigger])
  [@@disable Float.decode, Float.decode_aux, Float.encode, Util.pow2, Util.ipow2]
  [@@timeout 3600]
  [@@by [%use Theorems_format_ranges.within_format_range f x] @> auto]
  [@@fc]

(* [saturate] always produces a number within the format range *)
theorem saturate_is_within_range (f : Format.t) (x : CER.t) (sat : SaturationMode.t) (rnd : RoundingMode.t) =
  let _, _, _, m_lo, m_hi, _, _ = Format.get_format_parameters f in
  let s = (Float.saturate m_lo m_hi sat rnd x f.s f.d [@trigger]) in
  aug_real_is_within_range f s
  [@@timeout 3600]
  [@@disable Format.get_format_parameters, Util.ipow2, Util.pow2]
  [@@by auto]
  [@@fc]

(* Encoding after saturation is always ok *)
theorem saturate_encode_ok (f : Format.t) (x : CER.t) (sat : SaturationMode.t) (rnd : RoundingMode.t) =
  let _, _, _, m_lo, m_hi, _, _ = Format.get_format_parameters f in
  Result.is_ok (Float.encode f (Float.saturate m_lo m_hi sat rnd x f.s f.d) [@trigger])
  [@@disable Float.encode, Float.saturate, Format.get_format_parameters]
  [@@by [%use saturate_is_within_range f x sat rnd] @> auto]
  [@@fc]

let rounded f rnd x =
  let _, p, b, _, _, _, _ = Format.get_format_parameters f in
  Float.round_to_precision p b rnd x

(** [project] never returns an error *)
theorem project_ok (f : Format.t) (pi : Projection.t) (x : CER.t) =
  Result.is_ok ((Float.project f pi x) [@trigger])
  [@@timeout 30]
  [@@by
    [%use saturate_encode_ok f (rounded f (snd pi) x) (fst pi) (snd pi)]
    @> unroll_nonlin 10 10 1]
  [@@fc]


(** Some helpers *)

theorem pinf_decodes_to_pinf (f : Format.t) (x : Float.t) =
  let open CER in
  Float.is_pinf f x <==> ((Float.decode f x = PINF) [@trigger])
  [@@timeout 360]
  [@@by unroll_nonlin 10 10 100]
  [@@fc]

theorem ninf_decodes_to_ninf (f : Format.t) (x : Float.t) =
  let open CER in
  Float.is_ninf f x <==> ((Float.decode f x = NINF) [@trigger])
  [@@timeout 360]
  [@@by unroll_nonlin 10 10 100]
  [@@fc]

theorem inf_decodes_to_inf (f : Format.t) (x : Float.t) =
  let open CER in
  ((Float.is_inf f x) [@trigger]) <==> (Float.decode f x = NINF || Float.decode f x = PINF)
  [@@by
    [%use pinf_decodes_to_pinf f x] @>
    [%use ninf_decodes_to_ninf f x] @>
    unroll 1]
  [@@fc]

theorem nan_decodes_to_nan (f : Format.t) (x : Float.t) =
  let open CER in
  Float.is_nan f x <==> ((Float.decode f x = NaN) [@trigger])
  [@@timeout 120]
  [@@by unroll 50]
  [@@fc]

theorem zero_decodes_to_zero (f : Format.t) (x : Float.t) =
  let open CER in
  Float.is_zero f x <==> (Float.decode f x = R 0.0) [@trigger]
  [@@timeout 60]
  [@@by unroll 25]
  [@@fc]

theorem ipow2_gt_0 (n:int) =
  (Util.ipow2 n) [@trigger] > 0
  [@@timeout 10]
  [@@by auto]
  [@@fc]

theorem decode_0_is_0 (f : Format.t)  =
  let open CER in
  (Float.decode f 0) [@trigger] = R 0.0
  [@@timeout 60]
  [@@by enumerate ["f"] @> ground_eval ()]
  [@@fc]

theorem zero_means_is_zero (f : Format.t) (x : Float.t) =
  let open CER in
  x = 0 ==> ((Float.is_zero f x) [@trigger])
  [@@timeout 3600]
  [@@disable Util.ipow2, Util.pow2]
  [@@by unroll_nonlin 10 10 1000]
  [@@fc]

(* theorem zero_is_zero_fwd (f : Format.t) (x : Float.t) =
  let open CER in
  x = 0 ==> ((Float.decode f x = R 0.0) [@trigger])
  [@@timeout 360]
  [@@by enumerate ["f"] @> auto]

theorem zero_is_zero_bwd (f : Format.t) (x : Float.t) =
  let open CER in
  x = 0 <== ((Float.decode f x = R 0.0) [@trigger])
  [@@timeout 1200]
  (* [@@by enumerate ["f"] @> auto] *)
  [@@by auto]


theorem zero_is_zero (f : Format.t) (x : Float.t) =
  let open CER in
  x = 0 <==> ((Float.decode f x = R 0.0) [@trigger])
  [@@timeout 60]
  [@@disable Float.decode, Float.decode_aux]
  [@@by
    [%use zero_is_zero_fwd f x] @>
    [%use zero_is_zero_bwd f x] @>
    auto]
  [@@fc] *)

(* theorem decode_specials (f : Format.t) (x : Float.t) =
  let open CER in
  ((Float.is_pinf f x) <==> (Float.decode f x = PINF)) &&
  ((Float.is_ninf f x) <==> (Float.decode f x = NINF)) &&
  ((Float.is_nan f x) <==> (Float.decode f x = NaN)) &&
  ((Float.is_zero f x) <==> (Float.decode f x = R 0.0)) &&
  ((x = 0) <==> (Float.decode f x = R 0.0))
  [@@timeout 3600]
  [@@disable Float.decode, Float.decode_aux, Util.pow2, Util.ipow2, Float.is_pinf, Float.is_ninf, Float.is_nan, Float.is_zero]
  [@@by
    [%use pinf_decodes_to_pinf f x] @>
    [%use ninf_decodes_to_ninf f x] @>
    [%use nan_decodes_to_nan f x] @>
    [%use zero_decodes_to_zero f x] @>
    [%use zero_is_zero f x] @>
    auto] *)

(** 4.7.1 Specification of IEEE Std 754 formats *)

(* (Nothing) *)


(** 4.7.2 Conversion from IEEE Std 754 formats to P3109 *)

(* TODO: proof that the IEEE754 rounding mode in encode754 is irrelevant for our [x]s *)

(** [internal_convert_to_p3109] never returns an error *)
theorem internal_convert_to_p3109_ok (phi: IEEE754.Format.t) (f : Format.t) (pi : Projection.t) (x : IEEE754.t) =
  Result.is_ok (Float.internal_convert_to_p3109 phi f pi x)
  [@@disable Float.project, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.7.3 Conversion from P3109 to IEEE Std 754 *)

(** 4.8.1 Unary sign operations *)

(** [internal_abs] never returns an error *)
theorem internal_abs_ok (f : Format.t) (x : Float.t) =
  f.s = Signedness.Signed ==>
  Result.is_ok (Float.internal_abs f x)
  [@@timeout 60]
  [@@by
    [%use decode_encode_ok f x]
    @> unroll_nonlin 10 10 1000]

(** [internal_negate] never returns an error *)
theorem internal_negate_ok (f : Format.t) (x : Float.t) =
  f.s = Signedness.Signed ==>
  Result.is_ok (Float.internal_negate f x)
  [@@timeout 120]
  [@@by
    [%use decode_encode_ok f x]
    @> unroll_nonlin 10 10 1000]


(** 4.8.2 Binary sign operations *)

(** [internal_copy_sign] never returns an error *)
theorem internal_copy_sign_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_copy_sign f x y)
  [@@disable Float.encode, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@timeout 120]
  [@@by
    [%use decode_within_range f x] @>
    [%use decode_within_range f y] @>
    [%use encode_ok_within_range f (Float.decode f x)] @>
    [%use encode_ok_within_range f CER.(~- (Float.decode f x))] @>
    [%use encode_ok_within_range f CER.NaN] @>
    auto]


(** 4.8.3 Binary arithmetic operations *)

(** [internal_add] never returns an error *)
theorem internal_add_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_add f_x f_y f_z pi x y)
  [@@disable Specification.Float.project, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@timeout 60]
  [@@by auto]

(** [internal_subtract] never returns an error *)
theorem internal_subtract_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_subtract f_x f_y f_z pi x y)
  [@@disable Specification.Float.project, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@timeout 3600]
  [@@by auto]

(** [internal_multiply] never returns an error *)
theorem internal_multiply_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_multiply f_x f_y f_z pi x y)
  [@@disable Specification.Float.project, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@timeout 60]
  [@@by auto]

(** [internal_divide] never returns an error *)
theorem internal_divide_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_divide f_x f_y f_z pi x y)
  [@@disable Specification.Float.project, Specification.Float.decode, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@timeout 60]
  [@@by auto]


(** 4.8.4 Unary mathematical operations *)

(** [internal_fma] never returns an error *)
theorem internal_fma_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (f_r : Format.t) (pi : Projection.t)
  (x : Float.t) (y : Float.t) (z : Float.t) =
  Result.is_ok (Float.internal_fma f_x f_y f_z f_r pi x y z)
  [@@disable Float.project, Float.decode, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2,
    Format.get_format_parameters, Float.internal_fma]
  [@@by auto]


(** 4.8.xx Fused Add Add *)

(** [internal_faa] never returns an error *)
theorem internal_faa_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (f_r : Format.t) (pi : Projection.t)
  (x : Float.t) (y : Float.t) (z : Float.t) =
  Result.is_ok (Float.internal_faa f_x f_y f_z f_r pi x y z)
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]

(** 4.8.5 Unary mathematical operations *)

(** [internal_recip] never returns an error *)
theorem internal_recip_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_recip f_x f_z pi x)
  [@@timeout 60]
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters, Sqrt.sqrt]
  [@@by auto]

(** [internal_sqrt] never returns an error *)
theorem internal_sqrt_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_sqrt f_x f_z pi x)
  [@@timeout 60]
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters, Sqrt.sqrt]
  [@@by auto]

(** [internal_rsqrt] never returns an error *)
theorem internal_rsqrt_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_rsqrt f_x f_z pi x)
  [@@timeout 3600]
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters, Sqrt.sqrt]
  [@@by auto]

(** [internal_exp] never returns an error *)
theorem internal_exp_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_exp f_x f_z pi x)
  [@@disable Specification.Float.project, Specification.Float.decode, Float.decode_aux, Format.get_format_parameters]
  [@@by auto]

(** [internal_exp2] never returns an error *)
theorem internal_exp2_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_exp2 f_x f_z pi x)
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Exp.exp2, Format.get_format_parameters]
  [@@by auto]

(** [internal_log] never returns an error *)
theorem internal_log_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_log f_x f_z pi x)
  [@@disable Float.project, Float.decode, Float.decode_aux, Log.log, Log.ln, Format.get_format_parameters]
  [@@by auto]

(** [internal_log2] never returns an error *)
theorem internal_log2_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) =
  Result.is_ok (Float.internal_log2 f_x f_z pi x)
  [@@disable Float.project, Float.decode, Float.decode_aux, Log.log2, Log.log, Log.ln, Format.get_format_parameters]
  [@@by auto]


(** 4.x.x Hypothenuse *)

(* aug_hypot wants a few helpers *)
theorem h1 (x : real) =
  ((Util.ripow (Real.abs x) 2) [@trigger]) >=. 0.0
  [@@timeout 10]
  [@@by auto]
  [@@fc]

theorem h2 (x : real) (y : real) =
  x >=. 0.0 && y >=. 0.0 ==> x +. y >=. 0.0
  [@@timeout 10]
  [@@by auto]
  [@@fc]

theorem h2 (x : real) (y : real) =
  (((Util.ripow (Real.abs x) 2) +. (Util.ripow (Real.abs y) 2)) [@trigger]) >=. 0.0
  [@@timeout 10]
  [@@by auto]
  [@@fc]

(** [aug_hypot] never returns an error *)
theorem aug_hypot_ok (x : CER.t) (y : CER.t) =
  Result.is_ok ((Float.aug_hypot x y) [@trigger])
  [@@timeout 60]
  [@@disable Sqrt.sqrt]
  [@@by auto]
  [@@fc]

theorem internal_hypot_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_hypot f_x f_y f_z pi x y)
  [@@timeout 60]
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.round_to_precision, Float.saturate, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by [%use aug_hypot_ok (Float.decode f_x x) (Float.decode f_y y)] @> auto]


(** 4.8.6 Scaled addition *)

(** [internal_add_scaled] never returns an error *)
theorem internal_add_scaled_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float.t) (s_x : int) (y : Float.t) (s_y : int) =
  Result.is_ok (Float.internal_add_scaled f_x f_y f_z pi x s_x y s_y)
  [@@timeout 60]
  [@@disable Float.project, Float.decode, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.8.7 Scaled multiplication *)

(** [internal_multiply_scaled] never returns an error *)
theorem internal_multiply_scaled_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float.t) (y : Float.t) (s : int) =
  Result.is_ok (Float.internal_multiply_scaled f_x f_y f_z pi x y s)
  [@@disable Float.project, Float.decode, Float.decode_aux, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.9 Mixed IEEE Std 754 and P3109 operations *)

(** [internal_scaled_fma] never returns an error *)
theorem internal_scaled_fma_ok (phi : IEEE754.Format.t) (f_x : Format.t) (f_y : Format.t) (pi : Projection.t)
    (a : IEEE754.t) (s_a : int) (x : Float.t) (y : Float.t) (s : int) =
  Result.is_ok (Float.internal_scaled_fma phi f_x f_y pi x y s a s_a )
  [@@timeout 3600]
  [@@disable Float.project, Float.decode, Float.decode_aux, Float.encode754, Float.round_to_precision, Float.saturate,
             Util.pow2, Util.ipow2, IEEE754.as_aug_real, IEEE754.is_nan, Format.get_format_parameters]
  [@@by [%use Theorems_IEEE754.as_aug_real_ok phi a] @> auto]


(** 4.10.1 Minimum and Maximum *)

(** [internal_minimum] never returns an error *)
theorem internal_minimum_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_minimum f x y)
  [@@timeout 600]
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** [internal_maximum] never returns an error *)
theorem internal_maximum_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_maximum f x y)
  [@@timeout 600]
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** [internal_minimum_number] never returns an error *)
theorem internal_minimum_number_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_minimum_magnitude f x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** [internal_maximum_number] never returns an error *)
theorem internal_maximum_number_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_maximum_number f x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** 4.xx MinimumMagnitude, MaximumMagnitude, and 'Number' variants *)

(** [internal_minimum_magnitude] never returns an error *)
theorem internal_minimum_magnitude_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_minimum_magnitude f x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** [internal_maximum_magnitude] never returns an error *)
theorem internal_maximum_magnitude_ok (f : Format.t) (x : Float.t) (y : Float.t) =
  Result.is_ok (Float.internal_maximum_magnitude f x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

(** 4.9.3 Clamp *)

(** [internal_clamp] never returns an error *)
theorem internal_clamp_ok (f : Format.t) (x : Float.t) (lo : Float.t) (hi : Float.t) =
  Result.is_ok (Float.internal_clamp f x lo hi)
  [@@timeout 360]
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]


(** 4.10.2 Comparisons *)

(** [internal_compare_less] never returns an error *)
theorem internal_compare_less_ok (f_x : Format.t) (f_y : Format.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_compare_less f_x f_y x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

theorem internal_compare_less_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_compare_less_equal f_x f_y x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

theorem internal_compare_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_compare_equal f_x f_y x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

theorem internal_compare_greater_ok (f_x : Format.t) (f_y : Format.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_compare_greater f_x f_y x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]


theorem internal_compare_greater_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float.t) (y : Float.t)  =
  Result.is_ok (Float.internal_compare_greater_equal f_x f_y x y)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]


(** 4.10.3 Predicates and classification *)

theorem internal_is_zero_ok (f : Format.t) (x : Float.t) =
  Result.is_ok (Float.internal_is_zero f x)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

theorem internal_is_one_ok (f : Format.t) (x : Float.t) =
  Result.is_ok (Float.internal_is_one f x)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]

theorem internal_is_sign_minus_ok (f : Format.t) (x : Float.t) =
  Result.is_ok (Float.internal_is_sign_minus f x)
  [@@disable Float.decode, Float.decode_aux, Float.encode]
  [@@by auto]


(** 4.10.4 Classifier operation *)


theorem predicate_coverage (f : Format.t) (x : Float.t) =
  Float.is_nan f x ||
  Float.is_infinite f x ||
  Float.is_zero f x ||
  Float.is_normal f x ||
  Float.is_subnormal f x
  [@@timeout 3600]
  [@@by unroll_nonlin 600 10 250]
  [@@fc]

(** All [Float.t] are classified *)
theorem internal_class_ok (f : Format.t) (x : Float.t) =
  Result.is_ok (Float.internal_class f x)
  [@@disable Float.internal_class]
  [@@by auto]

(** 4.10.5 Total order predicate *)

(** 4.10.6 Comparison predicates *)

(* (Nothing) *)