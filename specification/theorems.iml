[@@@import Util, "dune:math"]
[@@@import Specification, "specification.iml"]
[@@@import Theorems_pow2, "theorems_pow2.iml"]
[@@@import Theorems_encode, "theorems_encode.iml"]
[@@@import Theorems_format_ranges, "theorems_format_ranges.iml"]

open Specification

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

(** Precision is between 1 and 7 in all supported formats *)
theorem precision_1_7 (f:Format.t) =
  1 <= Format.precision f && Format.precision f <= 7

(** All [Float8.t] are classified *)
theorem thm_class_internal_ok (x:Float8.t) (fmt:Format.t) =
  Result.is_ok (Float8.class_internal x fmt)

theorem internal_lt_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t) =
  Result.is_ok (Float8.internal_lt x y x_fmt y_fmt)

(** [internal_abs] never returns an error *)
theorem internal_abs_ok (x : Float8.t) (fmt : Format.t) =
  Result.is_ok (Float8.internal_abs x fmt)
  [@@timeout 1800]
  [@@by [%use Theorems_format_ranges.thm_within_format_range x fmt] @> unroll 0]

(** [internal_negate] never returns an error *)
theorem internal_negate_ok (x : Float8.t) (fmt : Format.t) =
  Result.is_ok (Float8.internal_negate x fmt)
  [@@by [%use Theorems_format_ranges.thm_within_format_range x fmt] @> unroll 0]

(** [internal_add] never returns an error *)
theorem internal_add_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_add x y x_fmt y_fmt result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by unroll_nonlin 600 10 1024] (* ~12m *)

(** [internal_add_scaled] never returns an error *)
theorem internal_add_scaled_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (xscale:int) (yscale:int)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_add_scaled x y x_fmt y_fmt xscale yscale result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by
    [%use Theorems_pow2.thm_exreal_pow2_pos xscale] @>
    [%use Theorems_pow2.thm_exreal_pow2_pos yscale] @>
    unroll_nonlin 600 10 1024] (* ~13m *)

(** [internal_sub] never returns an error *)
theorem internal_subtract_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_subtract x y x_fmt y_fmt result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by unroll_nonlin 600 10 1024]

(** [internal_multiply] never returns an error *)
theorem internal_multiply_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_multiply x y x_fmt y_fmt result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by unroll_nonlin 600 10 1024] (* ~15m *)

(** [internal_multiply_scaled] never returns an error *)
theorem internal_multiply_scaled_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (scale:int) (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_multiply_scaled x y x_fmt y_fmt scale result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by unroll_nonlin 600 10 1024] (* ~22m *)

(** [internal_divide] never returns an error *)
theorem internal_divide_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_divide x y x_fmt y_fmt result_fmt ovf rnd)
  [@@timeout 1800]
  [@@by unroll_nonlin 600 10 1024] (* 23m *)

(** [convert_binary8_to_binary16_internal] never returns an error *)
theorem thm_convert_binary8_to_binary16_internal_ok (x : Float8.t) (x_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.convert_binary8_to_binary16_internal x x_fmt ovf rnd)
  [@@timeout 10]
