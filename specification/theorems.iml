[@@@import Util, "dune:math"]
[@@@import Log, "dune:math"]
[@@@import Exp, "dune:math"]
[@@@import Specification, "specification.iml"]
[@@@import Theorems_pow2, "theorems_pow2.iml"]
[@@@import Theorems_format_ranges, "theorems_format_ranges.iml"]
[@@@import Theorems_IEEE754, "theorems_ieee754.iml"]

open Specification

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

(** 4.6 Functions *)

(** All [Float8.t] are classified *)
theorem internal_class_ok (f : Format.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_class f x)
  [@@timeout 600]
  [@@by unroll_nonlin 30 5 150]

theorem internal_saturate_ok (m : real) (sat : bool) (rnd : RoundingMode.t) (x : ExReal.t) =
  Result.is_ok (Float8.internal_saturate m sat rnd x [@trigger])
  [@@fc]

theorem internal_round_to_precision_ok (p : int) (b : int) (rnd : RoundingMode.t) (x : ExReal.t) =
  Result.is_ok (Float8.internal_round_to_precision p b rnd x)

(* [decode] never throws an error *)
theorem decode_ok (f : Format.t) (x : Float8.t) =
  Result.is_ok (Float8.decode f x [@trigger])
  [@@timeout 120]
  [@@by unroll_nonlin 10 1 50]
  [@@fc]

(* [decode] always produces numbers within the format range *)
theorem decode_within_range (f : Format.t) (x : Float8.t) =
  let open Float8.NaNOrExReal in
  let _, _, _, fmax = Format.get_format_parameters f in
  let d = Float8.decode f x [@@trigger] in
  match d with
  | Ok (XR (ExReal.R r)) -> (-. fmax) <=. r && r <=. fmax
  | _ -> true
  [@@timeout 600]
  [@@disable Specification.Float8.decode, Format.get_format_parameters]
  [@@by
    [%use Theorems_format_ranges.within_format_range f x] @>
    auto]
  [@@fc]

(* [encode] is ok if the input is within the format range *)
theorem encode_ok_within_range (f : Format.t) (x : Float8.NaNOrExReal.t) =
  let open Float8.NaNOrExReal in
  let open ExReal in
  let _, _, _, fmax = Format.get_format_parameters f in
  let encoded = Float8.encode f x [@@trigger] in
  match x with
  | XR (R x) when x <. (-. fmax) || x >. fmax ->
    (* When x is outside the format range, encode returns an error *)
    Result.is_error encoded
  | _ ->
    (* When x is within the format range, encode returns ok *)
    Result.is_ok encoded
  [@@by unroll_nonlin 10 1 100]
  [@@fc]

(* Encoding a decoded number is always ok *)
theorem decode_encode_ok (f : Format.t)  (x : Float8.t) =
  match Float8.decode f x with
  | Ok y -> Result.is_ok (Float8.encode f y [@trigger])
  | Error _ -> false
  [@@disable Specification.Float8.encode, Specification.Float8.decode, Util.pow2, Util.ipow2]
  [@@by auto]
  [@@fc]

(* [saturate] always produces a number within the format range *)
theorem saturate_is_within_range (f : Format.t) (x : ExReal.t) (sat : bool) (rnd : RoundingMode.t) =
  let _, _, _, fmax = Format.get_format_parameters f in
  let s = (Float8.saturate fmax sat rnd x [@trigger]) in
  Float8.exreal_is_within_range f s
  [@@timeout 120]
  [@@disable Float8.saturate, Format.get_format_parameters, Util.ipow2, Util.pow2]
  [@@by auto]
  [@@fc]

(* Encoding after saturation is always ok *)
theorem saturate_encode_ok (f : Format.t) (x : ExReal.t) (sat : bool) (rnd : RoundingMode.t) =
  let _, _, _, fmax = Format.get_format_parameters f in
  Result.is_ok (Float8.encode f (Float8.NaNOrExReal.XR (Float8.saturate fmax sat rnd x)) [@trigger])
  [@@timeout 60]
  [@@by
    [%use saturate_is_within_range f x sat rnd]
    @> unroll_nonlin 10 10 100]
  [@@fc]

let rounded f rnd x =
  let _, p, b, m = Format.get_format_parameters f in
  Float8.round_to_precision p b rnd x

(** [project] never returns an error *)
theorem project_ok (f : Format.t) (pi : Projection.t) (x : ExReal.t) =
  Result.is_ok (Float8.project f pi x [@trigger])
  [@@timeout 30]
  [@@by
    [%use saturate_encode_ok f (rounded f (snd pi) x) (fst pi) (snd pi)]
    @> unroll_nonlin 10 10 1]
  [@@fc]

(** Some helpers *)
theorem nan_decodes_to_nan (f : Format.t) =
  let open Float8.NaNOrExReal in
  Float8.decode f (Float8.nan f) [@trigger] = Ok NaN
  [@@by unroll_nonlin 10 10 100]
  [@@fc]

theorem ninf_decodes_to_ninf (f : Format.t) (x : Float8.t) =
  let open Float8.NaNOrExReal in
  Float8.decode f x [@trigger] = Ok (XR ExReal.NINF) <==> x = Float8.ninf f
  [@@timeout 120]
  [@@by unroll_nonlin 5 2 50]
  [@@fc]

theorem pinf_decodes_to_pinf (f : Format.t) (x : Float8.t) =
  let open Float8.NaNOrExReal in
  Float8.decode f x [@trigger] = Ok (XR ExReal.PINF) <==> x = Float8.pinf f
  [@@timeout 60]
  [@@by unroll_nonlin 5 2 50]
  [@@fc]

theorem zero_decodes_to_zero (f : Format.t) (x : Float8.t) =
  let open Float8.NaNOrExReal in
  Float8.decode f x [@trigger] = Ok (XR ExReal.zero) <==> x = Float8.zero
  [@@timeout 3600]
  [@@disable Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by unroll_nonlin 600 5 150]
  [@@fc]

(** 4.7.1 Specification of IEEE Std 754 formats *)

(* (Nothing) *)


(** 4.7.2 Conversion from IEEE Std 754 formats to P3109 *)

(* TODO: proof that the IEEE754 rounding mode in encode754 is irrelevant for our [x]s *)

(** [internal_convert_to_p3109] never returns an error *)
theorem internal_convert_to_p3109_ok (phi: IEEE754.Format.t) (f : Format.t) (pi : Projection.t) (x : IEEE754.t) =
  Result.is_ok (Float8.internal_convert_to_p3109 phi f pi x)
  [@@disable Float8.project, Float8.decode, Float8.encode754, Float8.round_to_precision, Float8.saturate,
             Util.pow2, Util.ipow2, IEEE754.as_extended_real, IEEE754.is_nan, Format.get_format_parameters]
  [@@by auto]


(** 4.7.3 Conversion from P3109 to IEEE Std 754 *)

(** 4.8.1 Unary sign operations *)

(** [internal_abs] never returns an error *)
theorem internal_abs_ok (f : Format.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_abs f x)
  [@@by
    [%use decode_encode_ok f x]
    @> unroll_nonlin 10 10 1000]

(** [internal_negate] never returns an error *)
theorem internal_negate_ok (f : Format.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_negate f x)
  [@@by
    [%use decode_encode_ok f x]
    @> unroll_nonlin 10 10 1000]


(** 4.8.2 Binary sign operations *)

(** [internal_copy_sign] never returns an error *)
theorem internal_copy_sign_ok (f : Format.t) (x : Float8.t) (y : Float8.t) =
  Result.is_ok (Float8.internal_copy_sign f x y)
  [@@by
    [%use decode_ok f y]
    @> [%use encode_ok_within_range f (Result.get_or ~default:Float8.NaNOrExReal.NaN (Float8.decode f y))]
    @> [%use internal_abs_ok f x]
    @> [%use internal_negate_ok f (Float8.abs f x)]
    @> unroll_nonlin 10 10 100
  ]


(** 4.8.3 Binary arithmetic operations *)

(** [internal_add] never returns an error *)
theorem internal_add_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float8.t) (y : Float8.t) =
  Result.is_ok (Float8.internal_add f_x f_y f_z pi x y)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]

(** [internal_sub] never returns an error *)
theorem internal_subtract_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float8.t) (y : Float8.t) =
  Result.is_ok (Float8.internal_subtract f_x f_y f_z pi x y)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]

(** [internal_multiply] never returns an error *)
theorem internal_multiply_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_multiply f_x f_y f_z pi x y)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]

(** [internal_divide] never returns an error *)
theorem internal_divide_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_divide f_x f_y f_z pi x y)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.8.4 Unary mathematical operations *)

(** [internal_fma_xreal] never returns an error *)
theorem internal_fma_xreal_ok (x : ExReal.t) (y : ExReal.t) (z : ExReal.t) =
  Result.is_ok (Float8.internal_fma_xreal x y z)
  [@@disable Util.pow2, Util.ipow2]
  [@@by auto]
  [@@fc]

(** [internal_fma] never returns an error *)
theorem internal_fma_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (f_r : Format.t) (pi : Projection.t)
  (x : Float8.t) (y : Float8.t) (z : Float8.t) =
  Result.is_ok (Float8.internal_fma f_x f_y f_z f_r pi x y z)
  [@@disable Float8.project, Float8.decode, Float8.round_to_precision, Float8.saturate, Util.pow2, Util.ipow2,
    Format.get_format_parameters, Float8.internal_fma]
  [@@by auto]


(** 4.8.5 Unary mathematical operations *)

(** [internal_sqrt] never returns an error *)
theorem internal_sqrt_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_sqrt f_x f_z pi x)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]

(** [internal_exp] never returns an error *)
theorem internal_exp_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_exp f_x f_z pi x)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Format.get_format_parameters]
  [@@by auto]

(** [internal_exp2] never returns an error *)
theorem internal_exp2_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_exp2 f_x f_z pi x)
  [@@disable Specification.Float8.project, Specification.Float8.decode, ExReal.exp2, Exp.exp2, Format.get_format_parameters]
  [@@by auto]

(** [internal_log] never returns an error *)
theorem internal_log_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_log f_x f_z pi x)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Log.log, Log.ln, Format.get_format_parameters]
  [@@by auto]

(** [internal_log2] never returns an error *)
theorem internal_log2_ok (f_x : Format.t) (f_z : Format.t) (pi : Projection.t) (x : Float8.t) =
  Result.is_ok (Float8.internal_log2 f_x f_z pi x)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Log.log2, Log.log, Log.ln, Format.get_format_parameters]
  [@@by auto]


(** 4.8.6 Scaled addition *)

(** [internal_add_scaled] never returns an error *)
theorem internal_add_scaled_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float8.t) (s_x : int) (y : Float8.t) (s_y : int) =
  Result.is_ok (Float8.internal_add_scaled f_x f_y f_z pi x s_x y s_y)
  [@@timeout 60]
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.8.7 Scaled multiplication *)

(** [internal_multiply_scaled] never returns an error *)
theorem internal_multiply_scaled_ok (f_x : Format.t) (f_y : Format.t) (f_z : Format.t) (pi : Projection.t)
  (x : Float8.t) (y : Float8.t) (s : int) =
  Result.is_ok (Float8.internal_multiply_scaled f_x f_y f_z pi x y s)
  [@@disable Specification.Float8.project, Specification.Float8.decode, Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]


(** 4.9 Mixed IEEE Std 754 and P3109 operations *)

theorem internal_scaled_fma_xreal_is_ok (a : ExReal.t) (s_a : int) (x : ExReal.t) (y : ExReal.t) (s : int) =
  Result.is_ok (Float8.internal_scaled_fma_xreal a s_a x y s)
  [@@disable Util.pow2, Util.ipow2, Format.get_format_parameters]
  [@@by auto]
  [@@fc]

(** [internal_scaled_fma] never returns an error *)
theorem internal_scaled_fma_ok (phi : IEEE754.Format.t) (f_x : Format.t) (f_y : Format.t) (pi : Projection.t)
    (a : IEEE754.t) (s_a : int) (x : Float8.t) (y : Float8.t) (s : int) =
  Result.is_ok (Float8.internal_scaled_fma phi f_x f_y pi a s_a x y s)
  [@@disable Float8.project, Float8.decode, Float8.encode754, Float8.round_to_precision, Float8.saturate,
             Util.pow2, Util.ipow2, IEEE754.as_extended_real, IEEE754.is_nan, Format.get_format_parameters]
  [@@by [%use Theorems_IEEE754.as_extended_real_ok phi a] @> auto]


(** 4.10.1 Minimum and Maximum *)

(** [internal_minimum] never returns an error *)
theorem internal_minimum_ok (f : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_minimum f x y)
  [@@by
    [%use decode_ok f x]
    @> [%use decode_ok f y]
    @> unroll_nonlin 10 10 100]

(** [internal_maximum] never returns an error *)
theorem internal_maximum_ok (f : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_maximum f x y)
  [@@by
    [%use decode_ok f x]
    @> [%use decode_ok f y]
    @> unroll_nonlin 10 10 100]

(** 4.10.2 Comparisons *)

(** [internal_compare_less] never returns an error *)
theorem internal_compare_less_ok (f_x : Format.t) (f_y : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_compare_less f_x f_y x y)
  [@@by
    [%use decode_ok f_x x]
    @> [%use decode_ok f_y y]
    @> unroll_nonlin 10 10 100]

theorem internal_compare_less_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_compare_less_equal f_x f_y x y)
  [@@by
    [%use decode_ok f_x x]
    @> [%use decode_ok f_y y]
    @> unroll_nonlin 10 10 100]

theorem internal_compare_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_compare_equal f_x f_y x y)
  [@@by
    [%use decode_ok f_x x]
    @> [%use decode_ok f_y y]
    @> unroll_nonlin 10 10 100]

theorem internal_compare_greater_ok (f_x : Format.t) (f_y : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_compare_greater f_x f_y x y)
  [@@by
    [%use decode_ok f_x x]
    @> [%use decode_ok f_y y]
    @> unroll_nonlin 10 10 100]


theorem internal_compare_greater_equal_ok (f_x : Format.t) (f_y : Format.t) (x : Float8.t) (y : Float8.t)  =
  Result.is_ok (Float8.internal_compare_greater_equal f_x f_y x y)
  [@@by
    [%use decode_ok f_x x]
    @> [%use decode_ok f_y y]
    @> unroll_nonlin 10 10 100]


(** 4.10.3 Predicates and classification *)
(** 4.10.4 Classifier operation *)
(** 4.10.5 Total order predicate *)
(** 4.10.6 Comparison predicates *)

(* (Nothing) *)