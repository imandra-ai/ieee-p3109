[@@@import Specification, "specification.iml"]

open Specification

(** Precision is between 1 and 7 in all supported formats *)
theorem precision_1_7 (f:Format.t) =
  1 <= Format.precision f && Format.precision f <= 7

(** All [Float8.t] are classified *)
theorem no_no_class (x:Float8.t) (fmt:Format.t) =
  (Float8.class_ x fmt) <> Float8.NoClass

(** [internal_negate] never returns an error *)
theorem internal_negate_ok (x : Float8.t) (fmt : Format.t) =
  Result.is_ok (Float8.internal_negate x fmt)

(** [internal_add] never returns an error *)
theorem internal_add_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_add x y x_fmt y_fmt result_fmt ovf rnd)
  [@@no_validate]

(** [internal_add_scaled] never returns an error *)
theorem internal_add_scaled_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (xscale:int) (yscale:int)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_add_scaled x y x_fmt y_fmt xscale yscale result_fmt ovf rnd)
  [@@no_validate]

(** [internal_sub] never returns an error *)
theorem internal_subtract_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_subtract x y x_fmt y_fmt result_fmt ovf rnd)
  [@@no_validate]

(** [internal_multiply] never returns an error *)
theorem internal_multiply_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_multiply x y x_fmt y_fmt result_fmt ovf rnd)
  [@@no_validate]

(** [internal_multiply_scaled] never returns an error *)
theorem internal_multiply_scaled_ok (x : Float8.t) (y : Float8.t) (x_fmt : Format.t) (y_fmt : Format.t)
  (scale:int) (result_fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  Result.is_ok (Float8.internal_multiply_scaled x y x_fmt y_fmt scale result_fmt ovf rnd)
  [@@no_validate]
