[@@@import Util, "dune:math"]
[@@@import Specification, "specification.iml"]

open Specification

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

let ok_within_range x fmt : bool =
  let open Float8.NaNOrExReal in
  let _, _, fmax = Format.get_format_parameters fmt in
  let encoded = Float8.encode x fmt in
  match x with
  | XR (ExReal.R x) when x <. (-. fmax) || x >. fmax ->
    not (Result.is_ok encoded)
  | _ -> Result.is_ok encoded

theorem encode_ok_1 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  fmt = Format.B8P1 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_2 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P2 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_3 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P3 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_4 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P4 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_5 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P5 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_6 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P6 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_7 (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  let open Float8.NaNOrExReal in
  fmt = Format.B8P7 ==> ok_within_range x fmt
  [@@by unroll 50]

theorem encode_ok_within_range (x : Float8.NaNOrExReal.t) (fmt : Format.t) =
  ok_within_range x fmt [@trigger]
  [@@timeout 3600]
  [@@by
    [%use encode_ok_1 x fmt] @>
    [%use encode_ok_2 x fmt] @>
    [%use encode_ok_3 x fmt] @>
    [%use encode_ok_4 x fmt] @>
    [%use encode_ok_5 x fmt] @>
    [%use encode_ok_6 x fmt] @>
    [%use encode_ok_7 x fmt] @>
    unroll 0]
  [@@fc]

theorem saturate_is_ok (x : ExReal.t) (fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  let _, _, max = Format.get_format_parameters fmt in
  Result.is_ok (Float8.saturate x (ExReal.R max) ovf rnd)

theorem saturate_is_within_range (x : ExReal.t) (fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  let _, _, max = Format.get_format_parameters fmt in
  let s = (Float8.saturate x (ExReal.R max) ovf rnd) [@trigger] in
  match s with
  | Ok s -> Float8.exreal_is_within_range s fmt
  | _ -> false (* unreachable by [saturate_is_ok] *)
  [@@timeout 60]
  [@@by [%use saturate_is_ok x fmt ovf rnd] @> auto]
  [@@fc]

theorem saturate_encode_ok  (x : ExReal.t) (fmt : Format.t) (ovf : SaturationMode.t) (rnd : RoundingMode.t) =
  let _, _, max = Format.get_format_parameters fmt in
  let s = Float8.saturate x (ExReal.R max) ovf rnd in
  match s with
  | Ok s -> ok_within_range (Float8.NaNOrExReal.XR s) fmt
  | _ -> false
  [@@by
    [%use saturate_is_within_range x fmt ovf rnd] @>
    unroll 0]