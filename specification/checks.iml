(** Some checks and tests of specification types and functions *)

[@@@import Specification, "dune:specification"]
[@@@import Util, "dune:math"]

open Specification
open Float8

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

(** Check that the precision of B8P3 is as expected *)
lemma fmt_prec_p3 (f:Format.t) = (f = Format.B8P3) ==> (Format.precision f) = 3

(** Check that the format parameters for B8P3 are as expected *)
lemma fmt_params_p3 (f:Format.t) =
  (f = Format.B8P3) ==>
    let k, p, b, max = Format.get_format_parameters f in
    k = 8 && p = 3 && b = 16 && max = 49152.0
  [@@by auto]

  (** Check that the format parameters for B8P2 are as expected *)
lemma fmt_params_p2 (f:Format.t) =
  (f = Format.B8P2) ==>
    let k, p, b, max = Format.get_format_parameters f in
    k = 8 && p = 2 && b = 32 && max = 2147483648.0
  [@@by auto]

(** Check that the format parameters for B8P1 are as expected *)
lemma fmt_params_p1 (f:Format.t) =
  (f = Format.B8P1) ==>
    let k, p, b, max = Format.get_format_parameters f in
    k = 8 && p = 1 && b = 63 && max = Util.pow2 63
  [@@by auto]

(** Sanity check of bitwise int conversion *)
lemma bitwise_int_21 = of_int_repr Format.B8P3 21 = 0x15

let is_r (x : (NaNOrExReal.t, string) Result.t) (r : ExReal.t) =
  match x with
  | Ok (NaNOrExReal.XR xr) -> xr = r
  | _ -> false
  [@@macro]

(** Some extended reals sanity checks *)
lemma real_0 = is_r (decode Format.B8P3 Float8.zero) (ExReal.R 0.0) [@@by auto]
lemma real_ninf = is_r (decode Format.B8P3 (Float8.ninf Format.B8P3)) ExReal.NINF [@@by auto]
lemma real_pinf = is_r (decode Format.B8P3 (Float8.pinf Format.B8P3)) ExReal.PINF [@@by auto]

let p3_pos_one : t = 0x40 [@@macro]
let p3_neg_one : t = 0xC0 [@@macro]

lemma real_pos_one = is_r (decode Format.B8P3 (p3_pos_one)) (ExReal.R 1.0) [@@by auto]
lemma real_neg_one = is_r (decode Format.B8P3 (p3_neg_one)) (ExReal.R (- 1.0)) [@@by auto]

let tiny : Float8.t = 0x01 [@@macro]
let small : Float8.t = 0x04 [@@macro]
let one : Float8.t = 0x40 [@@macro]
let huge : Float8.t = 0x7E [@@macro]
let ntiny : Float8.t = 0x81 [@@macro]
let nsmall : Float8.t = 0x84 [@@macro]
let none : Float8.t = 0xC0 [@@macro]
let nhuge : Float8.t = 0xFE [@@macro]

lemma tiny_value = is_r (decode Format.B8P3 tiny) (ExReal.R (0.25 *. Util.pow2 (- 15))) [@@by auto]
lemma tiny_value = is_r (decode Format.B8P3 tiny) (ExReal.R (0.00000762939453125)) [@@by auto]
lemma small_value = is_r (decode Format.B8P3 small) (ExReal.R (1.0 *. Util.pow2 (- 15))) [@@by auto]
lemma one_value = is_r (decode Format.B8P3 one) (ExReal.R 1.0) [@@by auto]
lemma huge_value = is_r (decode Format.B8P3 huge) (ExReal.R 49152.0) [@@by auto]
lemma ntiny_value = is_r (decode Format.B8P3 ntiny) (ExReal.R (-. (0.25 *. Util.pow2 (- 15)))) [@@by auto]
lemma nsmall_value = is_r (decode Format.B8P3 nsmall) (ExReal.R (-. (1.0 *. Util.pow2 (- 15)))) [@@by auto]
lemma none_value = is_r (decode Format.B8P3 none) (ExReal.R (- 1.0)) [@@by auto]
lemma nhuge_value = is_r (decode Format.B8P3 nhuge) (ExReal.R (- 49152.0)) [@@by auto]

theorem thm_tiny_val = (to_int_repr Format.B8P3 tiny) = 1

lemma neg_tiny_not_nan = negate Format.B8P3 tiny <> nan Format.B8P3
  [@@by auto]

theorem tiny_encode = Float8.encode Format.B8P3 (NaNOrExReal.XR (ExReal.R (1.0 /. 131072.0))) = Ok (tiny)
  [@@by auto]

theorem neg_tiny_encode = Float8.encode Format.B8P3 (NaNOrExReal.XR (ExReal.R (-1.0 /. 131072.0))) = Ok (tiny + 128)
  [@@by auto]

theorem x = Float8.encode Format.B8P3 (NaNOrExReal.XR (ExReal.R (1.0 /. 131072.0))) = Ok ( tiny )
  [@@by auto]

lemma none_is_neg_one = none = negate Format.B8P3 one [@@by auto]
lemma zero_is_zero = zero = negate Format.B8P3 zero [@@by auto]

lemma huge_neg_real = is_r (decode Format.B8P3 (negate Format.B8P3 huge)) (ExReal.R (- 49152.0)) [@@by auto]

lemma log1 = Util.floor_log2_abs 49152.0 16 = 15 [@@by auto]
lemma log2 = Util.floor_log2_abs 24576.0 16 = 14 [@@by auto]

lemma tst1 = is_r (decode Format.B8P3 (of_int_repr Format.B8P3 0xFA)) (ExReal.R (- 24576.0)) [@@by auto]

lemma tst2 = is_r (decode Format.B8P3 (of_int_repr Format.B8P3 0xF8)) (ExReal.R (- 16384.0)) [@@by auto]

lemma tst2_real = is_r (decode Format.B8P3 (negate Format.B8P3 (of_int_repr Format.B8P3 0xF8))) (ExReal.R 16384.0)
  [@@by auto]

lemma rBB1 = is_r (Float8.decode Format.B8P1 (of_int_repr Format.B8P3 0x3B)) (ExReal.R 0.0625) [@@by auto]

lemma rBB2 = is_r (Float8.decode Format.B8P2 (of_int_repr Format.B8P3 0x3B)) (ExReal.R 0.1875) [@@by auto]

lemma rBB3 = is_r (Float8.decode Format.B8P3 (of_int_repr Format.B8P3 0x3B)) (ExReal.R 0.4375) [@@by auto]
