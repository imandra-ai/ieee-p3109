[@@@import Specification, "specification.iml"]
[@@@import Util, "dune:math"]

open Specification
open Float

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps [@@no_extract]

let one_up (f : Format.t) (x : Float.t) : Float.t =
  if Float.is_nan f x || Float.is_infinite f x then x
  else (Float.of_int_repr f ((Float.to_int_repr f x) + 1))

let one_down (f : Format.t) (x : Float.t) : Float.t =
  if Float.is_nan f x || Float.is_infinite f x then x
  else (Float.of_int_repr f ((Float.to_int_repr f x) - 1))

let only_exponent (f : Format.t) (x : Float.t) : Float.t =
  let _, p, _, _, _, _, _ = Format.get_format_parameters f in
  let x = Float.abs f x in
  let pwr = Util.ipow2 (p - 1) in
  (Util.machine_idiv x pwr) * pwr

let ulp (f : Format.t) (x : Float.t) : (real, string) Result.t =
  let open NaNOrExReal in
  let oe = only_exponent f x in
  match (decode f (Float.of_int_repr f (Float.to_int_repr f oe + 1))), decode f oe with
  | Ok(XR (R u)), Ok(XR (R l)) -> Ok(u -. l)
  | _ -> Error("undefined")
