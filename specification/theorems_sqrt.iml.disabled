[@@@import Specification, "dune:specification"]
[@@@import Sqrt, "sqrt.iml"]

open Specification
open Sqrt

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

eval (sqrt 0.0 8)
eval (sqrt 1.0 8)
eval (sqrt 4.0 8)
eval (sqrt 9.0 8)

eval (Float8.of_int_repr Format.B8P3 0x40)
eval (Float8.decode Format.B8P1 (Float8.of_int_repr Format.B8P1 0x40))
eval (sqrt 2.0 8)

let fmt = Format.B8P3 [@@macro]
let enc (r : real) = match Float8.encode fmt (Float8.NaNOrExReal.XR (ExReal.R r)) with | Ok e -> e | _ -> Float8.nan Format.B8P3
let dec (x : Float8.t) = match Float8.decode fmt x with | Ok (Float8.NaNOrExReal.XR (ExReal.R e)) -> e | _ -> 0.0

eval (enc 16.0)
eval (enc 32.0)

eval (sqrt 25.0 8)
eval (ExReal.sqrt (ExReal.R 25.0) 8)
eval (dec (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 256.0)))

verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 1.0) = (enc 1.0)) [@@by ground_eval]
verify (dec (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 1.0)) = 1.0) [@@by ground_eval]
verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 4.0) = (enc 2.0)) [@@by ground_eval]
verify (dec(Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 4.0)) = 2.0) [@@by ground_eval]
verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 16.0) = (enc 4.0)) [@@by ground_eval]
verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 64.0) = (enc 8.0)) [@@by ground_eval]
verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 256.0) = (enc 16.0)) [@@by ground_eval]
verify (dec (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 256.0)) = 16.0) [@@by ground_eval]
verify (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (Float8.nan Format.B8P3) = Float8.nan Format.B8P3)

eval (Float8.decode fmt (Float8.sqrt fmt fmt (false, RoundingMode.TowardZero) (enc 36.0)))

theorem sqrt_from_above (f : Format.t) (x : Float8.t) =
  match Float8.decode f x with
  | Ok (Float8.NaNOrExReal.XR (ExReal.R r)) when r >=. 0.0 ->
    (match sqrt r 8 with
    | Ok rt -> (rt *. rt) >=. r
    | Error _ -> false)
  | _ -> true
  [@@by enumerate ["f"; "x"] @> ground_eval]

let exp (f : Format.t) (x : Float8.t) : int =
  let _, _, bias, _ = Format.get_format_parameters f in
  let exp_sig : int =
      (if x.b0 then 1 else 0)
    + (if x.b1 then 2 else 0)
    + (if x.b2 then 4 else 0)
    + (if x.b3 then 8 else 0)
    + (if x.b4 then 16 else 0)
    + (if x.b5 then 32 else 0)
    + (if x.b6 then 64 else 0)
  in
  let biased_exp = match f with
    | Format.B8P1 -> exp_sig
    | Format.B8P2 -> exp_sig / 2
    | Format.B8P3 -> exp_sig / 4
    | Format.B8P4 -> exp_sig / 8
    | Format.B8P5 -> exp_sig / 16
    | Format.B8P6 -> exp_sig / 32
    | Format.B8P7 -> exp_sig / 64
  in
  biased_exp - bias

let only_exponent (f : Format.t) (x : Float8.t) : Float8.t =
  match f with
  | Format.B8P1 -> if x >= 128 then x - 128 else x
  | Format.B8P2 -> { b7=false; b6=x.b6; b5=x.b5; b4=x.b4; b3=x.b3; b2=x.b2; b1=x.b1; b0=false }
  | Format.B8P3 -> { b7=false; b6=x.b6; b5=x.b5; b4=x.b4; b3=x.b3; b2=x.b2; b1=false; b0=false }
  | Format.B8P4 -> { b7=false; b6=x.b6; b5=x.b5; b4=x.b4; b3=x.b3; b2=false; b1=false; b0=false }
  | Format.B8P5 -> { b7=false; b6=x.b6; b5=x.b5; b4=x.b4; b3=false; b2=false; b1=false; b0=false }
  | Format.B8P6 -> { b7=false; b6=x.b6; b5=x.b5; b4=false; b3=false; b2=false; b1=false; b0=false }
  | Format.B8P7 -> { b7=false; b6=x.b6; b5=false; b4=false; b3=false; b2=false; b1=false; b0=false }

let ulp (f : Format.t) (x : Float8.t) : (real, string) Result.t =
  let open Float8.NaNOrExReal in
  let oe = only_exponent f x in
  let v = Float8.decode f oe in
  match (Float8.decode f (Float8.of_int_repr f (Float8.to_int_repr f oe + 1))), Float8.decode f oe with
  | Ok(XR (R u)), Ok(XR (R l)) -> Ok(u -. l)
  | _ -> Error("undefined")


(* theorem sqrt_within
(* (f : Format.t) *)
  (x : Float8.t)
  =
  (* f <> Format.B8P1 ==> *)
  let f = Format.B8P2 in
  match Float8.decode f x with
  | Ok (Float8.NaNOrExReal.XR (ExReal.R r)) when r >=. 0.0 ->
    (match sqrt r 15, ulp f x with
    | Ok rt, Ok ulp_ -> (rt *. rt) -. r <=. 2.0 *. ulp_
    | _ -> true)
  | _ -> true
  [@@timeout 3600]
  [@@by enumerate ["_"; "x"] @> auto] (* 26m! *)

eval (let f = Format.B8P2 in
  let x = Float8.of_int_repr 11 in
  Float8.decode f x)

eval (let f = Format.B8P2 in
  let x = Float8.of_int_repr 11 in
  match Float8.decode f x with
  | Ok(Float8.NaNOrExReal.XR (ExReal.R r)) -> sqrt r 13
  | _ -> Ok(0.0))

eval (let f = Format.B8P2 in
  let x = Float8.of_int_repr 11 in
  match Float8.decode f x with
  | Ok(Float8.NaNOrExReal.XR (ExReal.R r)) -> (
    match sqrt r 12 with
    | Ok(rt) -> rt *. rt
    | _ -> 0.0
    )
  | _ -> 0.0)

eval (let f = Format.B8P2 in
  let x = Float8.of_int_repr 11 in
  ulp f x) *)

eval (Float8.decode Format.B8P1 (Float8.of_int_repr Format.B8P1 0x69))
eval (Float8.decode Format.B8P1 (Float8.of_int_repr Format.B8P1 0x7E))

eval (exp Format.B8P1 (Float8.of_int_repr Format.B8P1 0x70))
