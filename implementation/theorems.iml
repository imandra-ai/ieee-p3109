[@@@import Implementation, "dune:implementation"]
[@@@import Specification, "dune:specification"]

open Implementation

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

(** Proof that our implementation of [is_nan] is correct *)
theorem correct_is_nan (x:Float8.t) =
  Float8.is_nan x = Specification.Float8.is_nan x

(** Proof that our implementation of [of_int_bitwise] is correct *)
theorem correct_of_int_bitwise (x:int) =
  Float8.of_int_bitwise x = Specification.Float8.of_int_bitwise x


(** Proof that our implementation of [negate] is correct *)

theorem correct_negate_p7_b0t (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P7
  && x.b0 = true
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 3600]
  [@@fc]

theorem correct_negate_p7_b0f (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P7
  && x.b0 = false
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 3600]
  [@@fc]

theorem correct_negate_p7 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P7
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by
    [%use correct_negate_p7_b0t x fmt] @>
    [%use correct_negate_p7_b0f x fmt] @>
    auto
  ]
  [@@fc]

theorem correct_negate_p6 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P6
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 240]
  [@@fc]

theorem correct_negate_p5 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P5
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 60]
  [@@fc]

theorem correct_negate_p4 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P4
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 20]
  [@@fc]

theorem correct_negate_p3 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P3
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 20]
  [@@fc]

theorem correct_negate_p2 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P2
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 15]
  [@@fc]

theorem correct_negate_p1 (x:Float8.t) (fmt:Format.t) =
  fmt = Specification.Format.B8P1
  ==>
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by enumerate ["x"] @> simp @> auto]
  [@@timeout 15]
  [@@fc]

theorem correct_negate (x:Float8.t) (fmt:Format.t) =
  Implementation.Float8.negate x fmt = Specification.Float8.negate x fmt
  [@@by
     [%use correct_negate_p7 x fmt] @>
     [%use correct_negate_p6 x fmt] @>
     [%use correct_negate_p5 x fmt] @>
     [%use correct_negate_p4 x fmt] @>
     [%use correct_negate_p3 x fmt] @>
     [%use correct_negate_p2 x fmt] @>
     [%use correct_negate_p1 x fmt] @>
     enumerate ["fmt"] @>
    auto]
  [@@fc]
