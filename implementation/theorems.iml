[@@@import Implementation, "dune:implementation"]
[@@@import Specification, "dune:specification"]

open Implementation

let unroll_nonlin qt nqt steps = Tactic.unroll ~smt:"z3-full-nonlinear" ~query_timeout:qt ~no_asm_query_timeout:nqt steps

let i2s = Implementation.Float.i2s

(** Proof that our implementation of [abs] is correct *)
theorem correct_abs (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  i2s (Implementation.Float.abs f x) = Specification.Float.abs f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [negate] is correct *)
theorem correct_negate (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  i2s (Implementation.Float.negate f x) = Specification.Float.negate f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_zero] is correct *)
theorem correct_is_zero (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  Implementation.Float.is_zero f x = Specification.Float.is_zero f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_one] is correct *)
theorem correct_is_one (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  Implementation.Float.is_one f x = Specification.Float.is_one f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_nan] is correct *)
theorem correct_is_nan (f : Format.t) (x : Float.t) =
Specification.Format.k f = 8 ==>
  Implementation.Float.is_nan f x = Specification.Float.is_nan f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_sign_minus] is correct *)
theorem correct_is_sign_minus (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  Implementation.Float.is_sign_minus f x = Specification.Float.is_sign_minus f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_normal] is correct *)
theorem correct_is_normal (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  Implementation.Float.is_normal f x = Specification.Float.is_normal f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]

(** Proof that our implementation of [is_subnormal] is correct *)
theorem correct_is_subnormal (f : Format.t) (x : Float.t) =
  Specification.Format.k f = 8 ==>
  Implementation.Float.is_subnormal f x = Specification.Float.is_subnormal f (i2s x)
  [@@by enumerate ["f"; "x"] @> ground_eval]
  [@@timeout 60]
