(** For spec see https://github.com/P3109/Public *)

[@@@import Specification, "dune:specification"]

(* We chose to use the type definitions from the specification for convenience (but we wouldn't have to). *)

(** Format definitions *)

module Format = struct
  type t = Specification.Format.t
end

(** Rounding mode definitions *)

module RoundingMode = struct
  type t = Specification.RoundingMode.t
end

(** 8-bit Floating-point numbers *)

module Float8 = struct
  (* Type definition *)
  type t = Specification.Float8.t

  (** Constants *)

  let nan : t = Specification.Float8.nan [@@macro]

  let ninf : t = Specification.Float8.ninf [@@macro]

  let pinf : t = Specification.Float8.pinf [@@macro]

  let zero : t = Specification.Float8.zero [@@macro]

  (** Classification predicates *)

  let is_zero (f : Format.t) (x : t) : bool =
    not x.b7 && not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0 [@@macro]

  let is_one (f : Format.t) (x : t) : bool =
    let open Specification.Format in
    not x.b7 &&
    match f with
    | B8P1 -> not x.b6 && x.b5 && x.b4 && x.b3 && x.b2 && x.b1 && x.b0
    | _ -> x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0

  let is_nan (f : Format.t) (x : t) : bool =
    x.b7 && not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0 [@@macro]

  let is_infinite (f : Format.t) (x : t) : bool = Specification.Float8.is_infinite f x [@@macro]

  let is_finite (f : Format.t) (x : t) : bool = Specification.Float8.is_finite f x [@@macro]

  let is_normal (f : Format.t) (x : t) : bool =
    let open Specification.Format in
    is_finite f x
    &&
    match f with
    | B8P1 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2 || x.b1 || x.b0
    | B8P2 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2 || x.b1
    | B8P3 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2
    | B8P4 -> x.b6 || x.b5 || x.b4 || x.b3
    | B8P5 -> x.b6 || x.b5 || x.b4
    | B8P6 -> x.b6 || x.b5
    | B8P7 -> x.b6

  let is_subnormal (f : Format.t)  (x : t) : bool =
    let open Specification.Format in
    is_finite f x && not (is_zero f x)
    &&
    match f with
    | B8P1 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0
    | B8P2 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1
    | B8P3 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2
    | B8P4 -> not x.b6 && not x.b5 && not x.b4 && not x.b3
    | B8P5 -> not x.b6 && not x.b5 && not x.b4
    | B8P6 -> not x.b6 && not x.b5
    | B8P7 -> not x.b6

  let is_sign_minus (_f : Format.t) (x : t) : bool = x.b7

  let is_signaling (f : Format.t) (x : t) : bool = Specification.Float8.is_signaling f x [@@macro]

  let is_canonical (f : Format.t) (x : t) : bool = Specification.Float8.is_canonical f x [@@macro]

  (** Classifier *)

  type class_ = Specification.Float8.class_

  let class_ (f : Format.t) (x : t) : class_ =
    Specification.Float8.class_ f x

  (** Numerals *)

  (** Convert int [i] to a [t] (bitwise; lowest 8 bits only, rest ignored) *)
  let of_int_repr (i : int) : t =
    {
      b0 = i mod 2 <> 0;
      b1 = (Specification.Util.machine_idiv i 2) mod 2 <> 0;
      b2 = (Specification.Util.machine_idiv i 4) mod 2 <> 0;
      b3 = (Specification.Util.machine_idiv i 8) mod 2 <> 0;
      b4 = (Specification.Util.machine_idiv i 16) mod 2 <> 0;
      b5 = (Specification.Util.machine_idiv i 32) mod 2 <> 0;
      b6 = (Specification.Util.machine_idiv i 64) mod 2 <> 0;
      b7 = (Specification.Util.machine_idiv i 128) mod 2 <> 0;
    }

  (** Operations *)

  let abs (f : Format.t) (x : t) : t =
    if is_nan f x then x
    else
      {
        b7 = false;
        b6 = x.b6;
        b5 = x.b5;
        b4 = x.b4;
        b3 = x.b3;
        b2 = x.b2;
        b1 = x.b1;
        b0 = x.b0;
      }

  let negate (f : Format.t) (x : t) : t =
    if is_nan f x || is_zero f x then x
    else
      {
        b7 = not x.b7;
        b6 = x.b6;
        b5 = x.b5;
        b4 = x.b4;
        b3 = x.b3;
        b2 = x.b2;
        b1 = x.b1;
        b0 = x.b0;
      }
    [@@macro]

  let to_string (f : Format.t) (x : t)  = Specification.Float8.to_string f x
  [@@program]
end
