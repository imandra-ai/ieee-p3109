(** For spec see https://github.com/P3109/Public *)

[@@@import Specification, "dune:specification"]

(** Format definitions *)

module Format = struct
  type t = Specification.Format.t
end

(** Rounding mode definitions *)

module RoundingMode = struct
  type t = Specification.RoundingMode.t
end

(** 8-bit Floating-point numbers *)

module Float = struct
  (* Type definition. Our implementation supports only 8-bit formats. *)
  type t = { b7 : bool; b6 : bool; b5 : bool; b4 : bool; b3 : bool; b2 : bool; b1 : bool; b0 : bool }

  (** Constants *)

  let nan (_ : Format.t) : t = { b7 = true; b6 = false; b5 = false; b4 = false; b3 = false; b2 = false; b1 = false; b0 = false; } [@@ocamlformat "disable"]
  let ninf (_ : Format.t) : t = { b7 = true; b6 = true; b5 = true; b4 = true; b3 = true; b2 = true; b1 = true; b0 = true; } [@@ocamlformat "disable"]
  let pinf (_ : Format.t) : t = { b7 = false; b6 = true; b5 = true; b4 = true; b3 = true; b2 = true; b1 = true; b0 = true; } [@@ocamlformat "disable"]
  let zero (_ : Format.t) : t = { b7 = false; b6 = false; b5 = false; b4 = false; b3 = false; b2 = false; b1 = false; b0 = false; } [@@ocamlformat "disable"]

  (** Classification predicates *)

  let is_zero (_f : Format.t) (x : t) : bool =
    not x.b7 && not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0 [@@macro]

  let is_one (f : Format.t) (x : t) : bool =
    let open Specification.Format in
    not x.b7 &&
    match f.kp with
    | B8P1 -> not x.b6 && x.b5 && x.b4 && x.b3 && x.b2 && x.b1 && x.b0
    | _ -> x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0

  let is_nan (_f : Format.t) (x : t) : bool =
    x.b7 && not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0 [@@macro]

  let is_infinite (f : Format.t) (x : t) : bool = x = ninf f || x = pinf f [@@macro]

  let is_finite (f : Format.t) (x : t) : bool = not (is_infinite f x) && not (is_nan f x) [@@macro]

  let is_normal (f : Format.t) (x : t) : bool =
    let open Specification.Format in
    is_finite f x
    &&
    match f.kp with
    | B8P1 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2 || x.b1 || x.b0
    | B8P2 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2 || x.b1
    | B8P3 -> x.b6 || x.b5 || x.b4 || x.b3 || x.b2
    | B8P4 -> x.b6 || x.b5 || x.b4 || x.b3
    | B8P5 -> x.b6 || x.b5 || x.b4
    | B8P6 -> x.b6 || x.b5
    | B8P7 -> x.b6
    | _ -> false

  let is_subnormal (f : Format.t)  (x : t) : bool =
    let open Specification.Format in
    is_finite f x && not (is_zero f x)
    &&
    match f.kp with
    | B8P1 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1 && not x.b0
    | B8P2 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2 && not x.b1
    | B8P3 -> not x.b6 && not x.b5 && not x.b4 && not x.b3 && not x.b2
    | B8P4 -> not x.b6 && not x.b5 && not x.b4 && not x.b3
    | B8P5 -> not x.b6 && not x.b5 && not x.b4
    | B8P6 -> not x.b6 && not x.b5
    | B8P7 -> not x.b6
    | _ -> false

  let is_sign_minus (_f : Format.t) (x : t) : bool = x.b7

  let is_signaling (_f : Format.t) (_x : t) : bool = false [@@macro]

  let is_canonical (_f : Format.t) (_x : t) : bool = true [@@macro]

  (** Classifier *)

  type class_ = Specification.Float.class_

  let class_ (f : Format.t) (x : t) : class_ =
      if is_nan f x then NaN
      else if is_infinite f x && is_sign_minus f x then NegativeInfinity
      else if is_normal f x && is_sign_minus f x then NegativeNormal
      else if is_subnormal f x && is_sign_minus f x then NegativeSubnormal
      else if is_zero f x then Zero
      else if is_subnormal f x && not (is_sign_minus f x) then PositiveSubnormal
      else if is_normal f x && not (is_sign_minus f x) then PositiveNormal
      else if is_infinite f x && not (is_sign_minus f x) then PositiveInfinity
      else NaN (* unreachable *)

  (** Operations *)

  let abs (f : Format.t) (x : t) : t =
    if is_nan f x then x
    else
      {
        b7 = false;
        b6 = x.b6;
        b5 = x.b5;
        b4 = x.b4;
        b3 = x.b3;
        b2 = x.b2;
        b1 = x.b1;
        b0 = x.b0;
      }

  let negate (f : Format.t) (x : t) : t =
    if is_nan f x || is_zero f x then x
    else
      {
        b7 = not x.b7;
        b6 = x.b6;
        b5 = x.b5;
        b4 = x.b4;
        b3 = x.b3;
        b2 = x.b2;
        b1 = x.b1;
        b0 = x.b0;
      }
    [@@macro]

  let i2s (x : t) =
      (if x.b0 then 1 else 0)
    + (if x.b1 then 2 else 0)
    + (if x.b2 then 4 else 0)
    + (if x.b3 then 8 else 0)
    + (if x.b4 then 16 else 0)
    + (if x.b5 then 32 else 0)
    + (if x.b6 then 64 else 0)
    + (if x.b7 then 128 else 0)

  let to_string (f : Format.t) (x : t) =
    let bool_to_bin x = if x then "1" else "0" in
    Printf.sprintf "%s%s%s%s%s%s%s%s = %s" (bool_to_bin x.b7) (bool_to_bin x.b6)
      (bool_to_bin x.b5) (bool_to_bin x.b4) (bool_to_bin x.b3)
      (bool_to_bin x.b2) (bool_to_bin x.b1) (bool_to_bin x.b0)
      (Math.AugReal.to_string (Specification.Float.decode f (i2s x)))
      [@@ocamlformat "if-then-else=compact"] [@@program]

  [@@program]

end
